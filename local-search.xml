<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>hiredis的封装类</title>
    <link href="/2023/04/29/hiredis%E7%9A%84%E5%B0%81%E8%A3%85%E7%B1%BB/"/>
    <url>/2023/04/29/hiredis%E7%9A%84%E5%B0%81%E8%A3%85%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="对hiredis再次封装"><a href="#对hiredis再次封装" class="headerlink" title="对hiredis再次封装"></a>对hiredis再次封装</h1><h2 id="cautoredisreply-h"><a href="#cautoredisreply-h" class="headerlink" title="cautoredisreply.h"></a>cautoredisreply.h</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> CAUTOREDISREPLY_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CAUTOREDISREPLY_H</span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;hiredis.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;strings.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">enRedisResult</span><br>&#123;<br>    REDIS_SUCCESS,<span class="hljs-comment">// 成功</span><br>    REDIS_FAILED,<span class="hljs-comment">// 失败</span><br>&#125;;<br><br><span class="hljs-comment">// 用结构体包装一下，避免使用者忘记回收reply</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CAutoRedisReply</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">CAutoRedisReply</span>(redisReply* r = <span class="hljs-literal">NULL</span>);<br>    ~<span class="hljs-built_in">CAutoRedisReply</span>();<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">set</span><span class="hljs-params">(redisReply* r)</span></span>;<br>    <span class="hljs-function">redisReply* <span class="hljs-title">get</span><span class="hljs-params">()</span></span>;<br><span class="hljs-keyword">private</span>:<br>    redisReply* m_r;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CRedisClient</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">CRedisClient</span>() : <span class="hljs-built_in">m_bConnected</span>(<span class="hljs-literal">false</span>), <span class="hljs-built_in">m_redisCtx</span>(<span class="hljs-literal">NULL</span>)<br>    &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">CRedisClient</span>()<br>    &#123;<br>        <span class="hljs-built_in">clear</span>();<br>    &#125;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// 初始化</span><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Init</span><span class="hljs-params">(string IP, <span class="hljs-type">int</span> port, string password, <span class="hljs-type">int</span> timeout=<span class="hljs-number">5000</span>)</span></span>;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// 判断指定key是否存在</span><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Exist</span><span class="hljs-params">(string key)</span></span>;<br><br>    <span class="hljs-comment">// 设置指定key的值,过期时间单位：秒</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Set</span><span class="hljs-params">(string key, string val, <span class="hljs-type">uint32_t</span> expire)</span></span>;<br><br>    <span class="hljs-comment">// 获取指定key的值，字符串类型</span><br>    <span class="hljs-function">string <span class="hljs-title">Get</span><span class="hljs-params">(string key)</span></span>;<br><br>    <span class="hljs-comment">// 设置指定key的值,bin类型</span><br>    <span class="hljs-comment">// pVal:内存地址</span><br>    <span class="hljs-comment">// len：内存大小</span><br>    <span class="hljs-comment">// expire：过期时间，单位：秒</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Set</span><span class="hljs-params">(string key, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* pVal, <span class="hljs-type">int</span> length, <span class="hljs-type">uint32_t</span> expire)</span></span>;<br><br>    <span class="hljs-comment">// 获取指定key的值,bin类型</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Get</span><span class="hljs-params">(string key, CAutoRedisReply&amp; reply)</span></span>;<br>    <span class="hljs-comment">// 设置过期时间，不对外提供的原因是强制要求set key的同时必须设置过期时间</span><br>    <span class="hljs-function"><span class="hljs-type">int</span>  <span class="hljs-title">expireKey</span><span class="hljs-params">(string key, <span class="hljs-type">uint32_t</span> expire)</span></span>;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-comment">// 连接</span><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">connect</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">// 设置过期时间，不对外提供的原因是强制要求set key的同时必须设置过期时间</span><br><span class="hljs-comment">//    int  expireKey(string key, uint32_t expire);</span><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">bool</span>m_bConnected;<span class="hljs-comment">// 是否已连接成功</span><br>    redisContext*m_redisCtx;<span class="hljs-comment">// redisl连接</span><br>    stringm_szIp;<span class="hljs-comment">// redis服务器IP</span><br>    <span class="hljs-type">int</span>m_nPort;<span class="hljs-comment">// redis服务器端口</span><br>    string     m_password;<span class="hljs-comment">// redis密码</span><br>    <span class="hljs-type">uint32_t</span>m_timeout;<span class="hljs-comment">// 超时时间，单位：毫秒</span><br>&#125;;<br><br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// CAUTOREDISREPLY_H</span></span><br></code></pre></td></tr></table></figure><h2 id="cautoredisreply-cpp"><a href="#cautoredisreply-cpp" class="headerlink" title="cautoredisreply.cpp"></a>cautoredisreply.cpp</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;cautoredisreply.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>CAutoRedisReply::<span class="hljs-built_in">CAutoRedisReply</span>(redisReply* r): <span class="hljs-built_in">m_r</span>(r)<br>&#123;<br>&#125;<br><br>CAutoRedisReply::~<span class="hljs-built_in">CAutoRedisReply</span>()<br>&#123;<br>    <span class="hljs-keyword">if</span> (m_r != <span class="hljs-literal">nullptr</span>) <span class="hljs-comment">//由NULL替换为nullptr</span><br>    &#123;<br>        <span class="hljs-built_in">freeReplyObject</span>(m_r);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CAutoRedisReply::set</span><span class="hljs-params">(redisReply* r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (m_r != <span class="hljs-literal">nullptr</span>) <span class="hljs-comment">//由NULL替换为nullptr</span><br>    &#123;<br>        <span class="hljs-built_in">freeReplyObject</span>(m_r);<br>    &#125;<br><br>    m_r = r;<br>&#125;<br><br><span class="hljs-function">redisReply* <span class="hljs-title">CAutoRedisReply::get</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> m_r;<br>&#125;<br><br><span class="hljs-comment">////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</span><br><br><span class="hljs-comment">// 初始化</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">CRedisClient::Init</span><span class="hljs-params">(string IP, <span class="hljs-type">int</span> port, string password, <span class="hljs-type">int</span> timeout<span class="hljs-comment">/*=5000*/</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (IP==<span class="hljs-string">&quot;&quot;</span> || port&lt;=<span class="hljs-number">0</span> || password == <span class="hljs-string">&quot;&quot;</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;CRedisClient::Init(), IP==&quot;</span><span class="hljs-string">&quot; || port&lt;=0 || password == &quot;</span><span class="hljs-string">&quot;, IP=%s, prot=%d, password=%s&quot;</span>,IP.<span class="hljs-built_in">c_str</span>(), port,password.<span class="hljs-built_in">c_str</span>());<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    m_szIp = IP;<br>    m_nPort = port;<br>    m_password=password;<br>    m_timeout = timeout;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">connect</span>();<br>&#125;<br><br><span class="hljs-comment">// 判断指定key是否存在</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">CRedisClient::Exist</span><span class="hljs-params">(string key)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">bool</span> bSuc = <span class="hljs-built_in">connect</span>();<br>    <span class="hljs-keyword">if</span> (!bSuc)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;CRedisClient::Exist(), connect failed&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    ostringstream os;<br>    os&lt;&lt; <span class="hljs-string">&quot;exists &quot;</span> &lt;&lt; key;<br><br>    CAutoRedisReply autoR;<br>    redisReply* r = (redisReply*)<span class="hljs-built_in">redisCommand</span>(m_redisCtx, os.<span class="hljs-built_in">str</span>().<span class="hljs-built_in">c_str</span>());<br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == r)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;CRedisClient::Exist(), call redisCommand() printf, redis break connection,m_redisCtx: %p&quot;</span>, m_redisCtx);<br>        m_bConnected = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    autoR.<span class="hljs-built_in">set</span>(r);<br><br>    <span class="hljs-comment">// 类型检测</span><br>    <span class="hljs-keyword">if</span> (r-&gt;type != REDIS_REPLY_INTEGER)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;CRedisClient::Exist(), result printf, r-&gt;type=%d&quot;</span>, r-&gt;type);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> (r-&gt;integer==<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-comment">// 设置指定key的值,过期时间单位：秒</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">CRedisClient::Set</span><span class="hljs-params">(string key, string val, <span class="hljs-type">uint32_t</span> expire)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">bool</span> bSuc = <span class="hljs-built_in">connect</span>();<br>    <span class="hljs-keyword">if</span> (!bSuc)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;CRedisClient::Set(), connect failed&quot;</span>);<br>        <span class="hljs-keyword">return</span> REDIS_FAILED;<br>    &#125;<br><br>    ostringstream os;<br>    os&lt;&lt; <span class="hljs-string">&quot;set &quot;</span> &lt;&lt; key &lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt; val;<br><br>    <span class="hljs-comment">// set命令</span><br>    CAutoRedisReply autoR;<br>    redisReply* r = (redisReply*)<span class="hljs-built_in">redisCommand</span>(m_redisCtx, os.<span class="hljs-built_in">str</span>().<span class="hljs-built_in">c_str</span>());<br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == r)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;CRedisClient::Set(),call redisCommand() printf,command=%s, redis break connection,m_redisCtx: %p&quot;</span>,os.<span class="hljs-built_in">str</span>().<span class="hljs-built_in">c_str</span>(), m_redisCtx);<br>        m_bConnected = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">return</span> REDIS_FAILED;<br>    &#125;<br>    autoR.<span class="hljs-built_in">set</span>(r);<br><br>    <span class="hljs-keyword">if</span> (r-&gt;type!=REDIS_REPLY_STATUS || r-&gt;str==<span class="hljs-literal">NULL</span> || <span class="hljs-built_in">strcasecmp</span>(r-&gt;str, <span class="hljs-string">&quot;OK&quot;</span>) != <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;CRedisClient::Set(),result printf, type=%d, command=%s, errmsg=%s&quot;</span>, r-&gt;type, os.<span class="hljs-built_in">str</span>().<span class="hljs-built_in">c_str</span>(), r-&gt;str);<br>        <span class="hljs-keyword">return</span> REDIS_FAILED;<br>    &#125;<br><br>    <span class="hljs-comment">// expire命令</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">expireKey</span>(key, expire);<br>&#125;<br>    <span class="hljs-comment">///@ 带健值读取</span><br><span class="hljs-function">string <span class="hljs-title">CRedisClient::Get</span><span class="hljs-params">(string key)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">bool</span> bSuc = <span class="hljs-built_in">connect</span>();<br>    <span class="hljs-keyword">if</span> (!bSuc)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;CRedisClient::Get(), connect failed&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br><br>    ostringstream os;<br>    os&lt;&lt; <span class="hljs-string">&quot;get &quot;</span> &lt;&lt; key;<br><br>    CAutoRedisReply autoR;<br>    redisReply* r = (redisReply*)<span class="hljs-built_in">redisCommand</span>(m_redisCtx, os.<span class="hljs-built_in">str</span>().<span class="hljs-built_in">c_str</span>());<br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == r)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;CRedisClient::Get(), call redisCommand printf, redis break connection,m_redisCtx: %p&quot;</span>, m_redisCtx);<br>        m_bConnected = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>    autoR.<span class="hljs-built_in">set</span>(r);<br><br>    <span class="hljs-comment">// 类型检测</span><br>    <span class="hljs-keyword">if</span> (r-&gt;type != REDIS_REPLY_STRING || r-&gt;str==<span class="hljs-literal">NULL</span> || r-&gt;len==<span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;CRedisClient::Get(),result printf, type=%d, str=%s, len=%lu&quot;</span>,r-&gt;type, r-&gt;str, r-&gt;len);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">string</span>(r-&gt;str);<br>&#125;<br><br><span class="hljs-comment">// 设置指定key的值,bin类型</span><br><span class="hljs-comment">// pVal:内存地址</span><br><span class="hljs-comment">// len：内存大小</span><br><span class="hljs-comment">// expire：过期时间，单位：秒</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">CRedisClient::Set</span><span class="hljs-params">(string key, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* pVal, <span class="hljs-type">int</span> length, <span class="hljs-type">uint32_t</span> expire)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">bool</span> bSuc = <span class="hljs-built_in">connect</span>();<br>    <span class="hljs-keyword">if</span> (!bSuc)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;CRedisClient::Set(), connect failed&quot;</span>);<br>        <span class="hljs-keyword">return</span> REDIS_FAILED;<br>    &#125;<br><br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span>* cmd[<span class="hljs-number">5</span>];<br>    <span class="hljs-type">size_t</span>  len[<span class="hljs-number">5</span>];<br>    cmd[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;SET&quot;</span>;<br>    len[<span class="hljs-number">0</span>] = <span class="hljs-built_in">strlen</span>(cmd[<span class="hljs-number">0</span>]);<br>    cmd[<span class="hljs-number">1</span>] = key.<span class="hljs-built_in">c_str</span>();<br>    len[<span class="hljs-number">1</span>] = <span class="hljs-built_in">strlen</span>(cmd[<span class="hljs-number">1</span>]);<br>    cmd[<span class="hljs-number">2</span>] = pVal;<br>    len[<span class="hljs-number">2</span>] = length;<br><br>    <span class="hljs-comment">// set命令</span><br>    CAutoRedisReply autoR;<br>    redisReply* r = (redisReply *)<span class="hljs-built_in">redisCommandArgv</span>(m_redisCtx, <span class="hljs-number">3</span>, &amp;cmd[<span class="hljs-number">0</span>], &amp;len[<span class="hljs-number">0</span>]);<br>    <span class="hljs-keyword">if</span> (r == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;CRedisClient::Set(),call redisCommandArgv() printf, redis break connection,m_redisCtx: %p&quot;</span>, m_redisCtx);<br>        <span class="hljs-keyword">return</span> REDIS_FAILED;<br>    &#125;<br>    autoR.<span class="hljs-built_in">set</span>(r);<br><br>    <span class="hljs-keyword">if</span> (r-&gt;type!=REDIS_REPLY_STATUS || r-&gt;str==<span class="hljs-literal">NULL</span> || <span class="hljs-built_in">strcasecmp</span>(r-&gt;str, <span class="hljs-string">&quot;OK&quot;</span>) != <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;CRedisClient::Set(),result printf, type=%d, errmsg=%s&quot;</span>, r-&gt;type, r-&gt;str);<br>        <span class="hljs-keyword">return</span> REDIS_FAILED;<br>    &#125;<br><br>    <span class="hljs-comment">// expire命令</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">expireKey</span>(key, expire);<br>&#125;<br><br><span class="hljs-comment">// 获取指定key的值,bin类型</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">CRedisClient::Get</span><span class="hljs-params">(string key, CAutoRedisReply&amp; reply)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">bool</span> bSuc = <span class="hljs-built_in">connect</span>();<br>    <span class="hljs-keyword">if</span> (!bSuc)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;CRedisClient::Get(), connect failed&quot;</span>);<br>        <span class="hljs-keyword">return</span> REDIS_FAILED;<br>    &#125;<br><br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span>* cmd[<span class="hljs-number">3</span>];<br>    <span class="hljs-type">size_t</span>  len[<span class="hljs-number">3</span>];<br>    cmd[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;GET&quot;</span>;<br>    len[<span class="hljs-number">0</span>] = <span class="hljs-built_in">strlen</span>(cmd[<span class="hljs-number">0</span>]);<br>    cmd[<span class="hljs-number">1</span>] = key.<span class="hljs-built_in">c_str</span>();<br>    len[<span class="hljs-number">1</span>] = <span class="hljs-built_in">strlen</span>(cmd[<span class="hljs-number">1</span>]);<br><br>    <span class="hljs-comment">// set命令</span><br>    redisReply* r = (redisReply *)<span class="hljs-built_in">redisCommandArgv</span>(m_redisCtx, <span class="hljs-number">2</span>, &amp;cmd[<span class="hljs-number">0</span>], &amp;len[<span class="hljs-number">0</span>]);<br>    <span class="hljs-keyword">if</span> (r == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;CRedisClient::Get(),call redisCommandArgv() printf, redis break connection,m_redisCtx: %p&quot;</span>, m_redisCtx);<br>        <span class="hljs-keyword">return</span> REDIS_FAILED;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (r-&gt;type!=REDIS_REPLY_STRING)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;CRedisClient::Get(),result printf, type=%d, errmsg=%s&quot;</span>, r-&gt;type, r-&gt;str);<br>        <span class="hljs-built_in">freeReplyObject</span>(r);<br>        <span class="hljs-keyword">return</span> REDIS_FAILED;<br>    &#125;<br>    reply.<span class="hljs-built_in">set</span>(r);<br><br>    <span class="hljs-keyword">return</span> REDIS_SUCCESS;<br>&#125;<br><br><span class="hljs-comment">// 设置过期时间</span><br><span class="hljs-function"><span class="hljs-type">int</span>  <span class="hljs-title">CRedisClient::expireKey</span><span class="hljs-params">(string key, <span class="hljs-type">uint32_t</span> expire)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">bool</span> bSuc = <span class="hljs-built_in">connect</span>();<br>    <span class="hljs-keyword">if</span> (!bSuc)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;CRedisClient::expireKey(), connect failed&quot;</span>);<br>        <span class="hljs-keyword">return</span> REDIS_FAILED;<br>    &#125;<br><br>    ostringstream os;<br>    os&lt;&lt; <span class="hljs-string">&quot;expire &quot;</span> &lt;&lt; key &lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt; expire;<br><br>    CAutoRedisReply autoR;<br>    redisReply* r = (redisReply*)<span class="hljs-built_in">redisCommand</span>(m_redisCtx, os.<span class="hljs-built_in">str</span>().<span class="hljs-built_in">c_str</span>());<br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == r)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;CRedisClient::expireKey(),call redisCommand() printf,command=%s, redis break connection,m_redisCtx: %p&quot;</span>,os.<span class="hljs-built_in">str</span>().<span class="hljs-built_in">c_str</span>(), m_redisCtx);<br>        m_bConnected = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">return</span> REDIS_FAILED;<br>    &#125;<br>    autoR.<span class="hljs-built_in">set</span>(r);<br><br>    <span class="hljs-keyword">if</span> (r-&gt;type!=REDIS_REPLY_INTEGER || r-&gt;integer != <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;CRedisClient::expireKey(),result printf, type=%d, command=%s, errmsg=%s&quot;</span>, r-&gt;type, os.<span class="hljs-built_in">str</span>().<span class="hljs-built_in">c_str</span>(), r-&gt;str);<br>        <span class="hljs-keyword">return</span> REDIS_FAILED;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> REDIS_SUCCESS;<br>&#125;<br><br><span class="hljs-comment">////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CRedisClient::clear</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (m_redisCtx != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">redisFree</span>(m_redisCtx);<br>        m_redisCtx = <span class="hljs-literal">NULL</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 连接</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">CRedisClient::connect</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (m_bConnected)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-built_in">clear</span>();<br><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">timeval</span> tv;<br>    tv.tv_sec = m_timeout/<span class="hljs-number">1000</span>;<br>    tv.tv_usec = m_timeout%<span class="hljs-number">1000</span>;<br><br>    <span class="hljs-comment">// 连接</span><br>    m_redisCtx = <span class="hljs-built_in">redisConnectWithTimeout</span>(m_szIp.<span class="hljs-built_in">c_str</span>(), m_nPort, tv);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span>==m_redisCtx || m_redisCtx-&gt;err!=<span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;CRedisClient::connect(), connect redis server failed, ip:%s, port:%d, password=%s, err:%d, errmsg:%s&quot;</span>,m_szIp.<span class="hljs-built_in">c_str</span>(), m_nPort, m_password.<span class="hljs-built_in">c_str</span>(), m_redisCtx-&gt;err, m_redisCtx-&gt;errstr);<br>        <span class="hljs-built_in">clear</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 认证</span><br>    redisReply* pReply = (redisReply*)<span class="hljs-built_in">redisCommand</span>(m_redisCtx, <span class="hljs-string">&quot;auth %s&quot;</span>, m_password.<span class="hljs-built_in">c_str</span>());<br>    <span class="hljs-keyword">if</span> (pReply-&gt;type == REDIS_REPLY_ERROR)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;CRedisClient::connect(), auth redis server failed, ip:%s, port:%d, password=%s, errmsg:%s&quot;</span>, m_szIp.<span class="hljs-built_in">c_str</span>(), m_nPort, m_password.<span class="hljs-built_in">c_str</span>(), pReply-&gt;str);<br>        <span class="hljs-built_in">freeReplyObject</span>(pReply);<br>        <span class="hljs-built_in">clear</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-built_in">freeReplyObject</span>(pReply);<br><br>    m_bConnected = <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-comment">// 设置超时时间</span><br>    <span class="hljs-built_in">redisSetTimeout</span>(m_redisCtx, tv);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 子线程redis连接实例（新版）</span><br>CRedisClient m_redisClient;<br><br><span class="hljs-comment">// redis配置，应该写在配置文件中读取，这里只是简单演示</span><br>string IP = m_recvdipaddr.<span class="hljs-built_in">toStdString</span>();<br><span class="hljs-type">int</span>    port = <span class="hljs-number">6379</span>;<br>string password = <span class="hljs-string">&quot;yyjtest&quot;</span>;<br><span class="hljs-type">int</span>    timeout  = <span class="hljs-number">5000</span>;<br><span class="hljs-comment">// 初始化，并建立连接</span><br><span class="hljs-keyword">if</span>(!m_redisClient.<span class="hljs-built_in">Init</span>(IP,port,password,timeout))<br>&#123;<br>    <span class="hljs-built_in">qDebug</span>()&lt;&lt;<span class="hljs-string">&quot;子线程打开redis失败&quot;</span>;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-type">int</span> result1 = m_redisClient.<span class="hljs-built_in">Set</span>(<span class="hljs-string">&quot;verification_code:&quot;</span>+m_recvdusername.<span class="hljs-built_in">toStdString</span>(),m_recvdcode.<span class="hljs-built_in">toStdString</span>(), rftime);<br>    <span class="hljs-type">int</span> result2 =m_redisClient.<span class="hljs-built_in">expireKey</span>(<span class="hljs-string">&quot;login_tokens_client:&quot;</span>+m_recvdusername.<span class="hljs-built_in">toStdString</span>(),rftime);<br>    <span class="hljs-built_in">qDebug</span>()&lt;&lt;<span class="hljs-string">&quot;子线程刷新redis成功&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>QT</tag>
      
      <tag>Database</tag>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker基础</title>
    <link href="/2023/04/27/docker%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/04/27/docker%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h2 id="第一章-初识-Docker"><a href="#第一章-初识-Docker" class="headerlink" title="第一章 初识 Docker"></a>第一章 初识 Docker</h2><h3 id="1-1-Docker概念"><a href="#1-1-Docker概念" class="headerlink" title="1.1 Docker概念"></a>1.1 Docker概念</h3><ul><li>Docker是一个开源的应用容器引擎</li><li>诞生于2013年初，基于Go语言实现，dotCloud公司出品（后改名Docker Inc）</li><li>Docker可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的Linux机器上</li><li>容器是完全使用沙箱机制，相互隔离</li><li>容器性能开销极低</li></ul><p>​</p><p>​Docker可以运行在在MAC、Windows、CentOS、UBUNTU等操作系统上</p><p>​官网：<code>https://www.docker.com</code></p><h3 id="1-2-安装Docker"><a href="#1-2-安装Docker" class="headerlink" title="1.2 安装Docker"></a>1.2 安装Docker</h3><p>​1. yum包更新到最新</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum update<br></code></pre></td></tr></table></figure><p>​2. 安装需要的软件包，yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y yum-utils device-mapper-persistent-data lvm2<br></code></pre></td></tr></table></figure><p>​3. 设置yum源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shel">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo<br></code></pre></td></tr></table></figure><p>​4. 安装docker，出现输入的界面都按 y</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y docker-ce<br></code></pre></td></tr></table></figure><p>​5. 查看docker版本，验证是否成功</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker -v</span><br></code></pre></td></tr></table></figure><h3 id="1-3-Docker架构"><a href="#1-3-Docker架构" class="headerlink" title="1.3 Docker架构"></a>1.3 Docker架构</h3><ul><li>镜像（Image）：Docker镜像（Image），就相当于是一个root文件系统。比如官方镜像 ubuntu:16.04就包含了完整的一套Ubuntu16.04最小系统的root文件系统</li><li>容器（Container）：镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和对象一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等</li><li>仓库（Repository）：仓库可以看成一个代码控制中心，用来保存镜像</li></ul><h3 id="1-4-配置Docker镜像加速器"><a href="#1-4-配置Docker镜像加速器" class="headerlink" title="1.4 配置Docker镜像加速器"></a>1.4 配置Docker镜像加速器</h3><p>​默认情况下，将从docker hub（<a href="https://hub.docker.com/%EF%BC%89%E4%B8%8A%E4%B8%8B%E8%BD%BDdocker%E9%95%9C%E5%83%8F%EF%BC%8C%E5%A4%AA%E6%85%A2%E3%80%82%E4%B8%80%E8%88%AC%E9%83%BD%E4%BC%9A%E9%85%8D%E7%BD%AE%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%99%A8">https://hub.docker.com/）上下载docker镜像，太慢。一般都会配置镜像加速器</a></p><ul><li>USTC：中科大镜像加速器（<a href="https://docker.mirrors.ustc.edu.cn)/">https://docker.mirrors.ustc.edu.cn）</a></li><li>阿里云</li><li>网易云</li><li>腾讯云</li></ul><p>​</p><p>​在这里我们用阿里云镜像加速器，登陆阿里云查看个人加速地址</p><p>​注意：用阿里云时，每个人家加速器地址不同，然后在终端输入下面指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo mkdir -p /etc/docker<br>sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;<br>&#123;<br>  &quot;registry-mirrors&quot;: [&quot;https://eob5atc6.mirror.aliyuncs.com&quot;]<br>&#125;<br>EOF<br>sudo systemctl daemon-reload<br>sudo systemctl restart docker<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">##上面操作完成后输入下面代码测试是否成功</span></span><br> cat /etc/docker/daemon.json<br></code></pre></td></tr></table></figure><h2 id="第二章-Docker-命令"><a href="#第二章-Docker-命令" class="headerlink" title="第二章 Docker 命令"></a>第二章 Docker 命令</h2><h3 id="2-1-Docker-服务相关命令"><a href="#2-1-Docker-服务相关命令" class="headerlink" title="2.1 Docker 服务相关命令"></a>2.1 Docker 服务相关命令</h3><ul><li><p>启动docker 服务：</p><ul><li><pre><code class="shell">systemctl start docker<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>- 停止docker 服务：<br><br>  - ```shell<br>    systemctl stop docker<br></code></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>重启docker 服务：</p><ul><li><pre><code class="shell">systemctl restart docker<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>- 查看docker 服务状态：<br><br>  - ```shell<br>    systemctl status docker<br></code></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>设置开机启动docker：</p><ul><li><pre><code class="shell">systemctl enable docker<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br><br><br>### <span class="hljs-number">2.2</span> Docker 镜像相关命令<br><br>- 查看镜像：查看本地所有的镜像<br><br>  - ```shell<br>    docker images<br>    docker images -q #查看所有镜像的id<br></code></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>搜索镜像：从网络中查找需要的镜像</p><ul><li><pre><code class="shel">docker search 镜像名称<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br><span class="hljs-title">- 拉取镜像：从Docker 仓库下载镜像到本地，镜像名称格式为`名称:</span>版本号`，如果版本号不指定则是最新的版本。如果不知道镜像版本，可以去docker hub 搜索对应镜像查看<br><br>  - ```shell<br>    docker pull 镜像名称<br></code></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>删除镜像：删除本地镜像</p><ul><li><pre><code class="shell">docker rmi 镜像id/名称号:版本号 #删除指定本地镜像docker rmi &#39;docker images -q&#39; #删除所有本地镜像<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br><br><br>### <span class="hljs-number">2.3</span> Docker 容器相关命令<br><br>- 查看容器<br><br>  - ```shell<br>    docker ps #查看正在运行的容器<br>    docker ps -a #查看所有容器<br></code></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>创建并启动容器</p><ul><li><pre><code class="shell">docker run 参数 版本:版本号 &lt;/bin/bash&gt;#默认为/bin/bash<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>  - 参数说明：<br><br>    - `-i`：保持容器运行。通常与`-t`同时使用。加入`it`这两个参数后，容器创建后自动进入容器中，退出容器后，容器自动关闭<br>    - `-t`：为容器重新分配一个伪输入终端，通常与`-i`同时使用<br>    - `-d`：以守护（后台）模式运行容器。创建一个容器在后台运行，需要使用`docker exec`进入容器`docker exec -it c2 /bin/bash`。退出后，容器不会关闭<br>    - `-it`创建的容器一般称为交互式容器；`-id`创建的容器一般称为守护式容器<br>    - `--name`：为创建的容器命名<br><br>- 进入容器<br><br>  - ```shell<br>    docker exec 参数 #退出容器，容器不会关闭<br></code></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>停止容器</p><ul><li><pre><code class="shell">docker stop 容器名称<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>- 启动容器<br><br>  - ```shell<br>    docker start 容器名称<br></code></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>删除容器：如果容器是运行状态则删除失败，需要停止容器参能删除</p><ul><li><pre><code class="shel">docker rm 容器名称<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>- 查看容器信息<br><br>  - ```shell<br>    docker inspect 容器名称<br></code></pre></td></tr></table></figure></code></pre></li></ul></li></ul><h2 id="第三章-Docker-容器的数据卷"><a href="#第三章-Docker-容器的数据卷" class="headerlink" title="第三章 Docker 容器的数据卷"></a>第三章 Docker 容器的数据卷</h2><h3 id="3-1-数据卷概念及作用"><a href="#3-1-数据卷概念及作用" class="headerlink" title="3.1 数据卷概念及作用"></a>3.1 数据卷概念及作用</h3><p>​思考：</p><ul><li>Docker 容器删除后，在容器中产生的数据还在吗？</li><li>Docker 容器和外部继器可以交换文件吗？</li><li>容器之间想要进行数据交互？</li></ul><p><strong>数据卷</strong></p><ul><li>数据卷是宿主机中的一个目录或文件</li><li>当容器目录和数据卷目录绑定后，对方的修改会立即同步</li><li>一个数据卷可以被多个容器同时挂载</li><li>一个容器也可以被挂载多个数据卷</li></ul><p><strong>数据卷的作用</strong></p><ul><li>容器数据持久化</li><li>外部计价器和容器间接通信</li><li>容器之间数据交换</li></ul><h3 id="3-2-配置数据卷"><a href="#3-2-配置数据卷" class="headerlink" title="3.2 配置数据卷"></a>3.2 配置数据卷</h3><ul><li><p>创建启动容器时，使用<code>-v</code>参数 设置数据卷</p><ul><li><pre><code class="shel">docker run ... -v 宿主机目录(文件):容器内目录(文件) ...<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br><span class="hljs-bullet">-</span> 注意事项：<br><br><span class="hljs-bullet">  1.</span> 目录必须是绝对路径<br><span class="hljs-bullet">  2.</span> 如果目录不存在，会自动创建<br><span class="hljs-bullet">  3.</span> 可以挂载多个数据卷<br><br><br><br><span class="hljs-section">### 3.3 配置数据卷容器</span><br><br>​多容器进行数据交换：<br><br><span class="hljs-bullet">1.</span> 多个容器挂载同一个数据卷<br><span class="hljs-bullet">2.</span> 数据卷容器<br><br>​<span class="hljs-strong">**配置数据卷容器：**</span><br><br><span class="hljs-bullet"> 1.</span> 创建启动c3数据卷容器，使用<span class="hljs-code">`-v`</span>参数 设置数据卷<br><br><span class="hljs-code">    ```shell</span><br><span class="hljs-code">    docker run -it --name=c3 -v /volume centos:7 /bin/bash</span><br></code></pre></td></tr></table></figure></code></pre></li></ul></li></ul><ol start="2"><li><p>创建启动c1 c2容器，使用<code>--volumes-from</code>参数 设置数据卷</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -it --name=c1 --volumes-from c3 centos:7 /bin/bash<br>docker run -it --name=c2 --volumes-from c3 centos:7 /bin/bash<br></code></pre></td></tr></table></figure></li></ol><h2 id="第四章-Docker-应用部署"><a href="#第四章-Docker-应用部署" class="headerlink" title="第四章 Docker 应用部署"></a>第四章 Docker 应用部署</h2><h3 id="4-1-MySQL部署"><a href="#4-1-MySQL部署" class="headerlink" title="4.1 MySQL部署"></a>4.1 MySQL部署</h3><h5 id="4-1-1案例：需求"><a href="#4-1-1案例：需求" class="headerlink" title="4.1.1案例：需求"></a>4.1.1案例：需求</h5><ul><li>在Docker 容器中部署MySQL，并通过外部MySQL 客户端操作MySQL Server</li></ul><h5 id="4-1-2-案例：实现"><a href="#4-1-2-案例：实现" class="headerlink" title="4.1.2 案例：实现"></a>4.1.2 案例：实现</h5><ol><li>搜索mysql镜像</li><li>拉取mysql镜像</li><li>创建容器</li><li>操作容器中的mysql</li></ol><h5 id="4-1-3-问题及解决方案"><a href="#4-1-3-问题及解决方案" class="headerlink" title="4.1.3 问题及解决方案"></a>4.1.3 问题及解决方案</h5><ul><li>容器内的网络服务和外部机器不能直接通信</li><li>外部机器和宿主机可以直接通信</li><li>宿主机和容器可以直接通信</li><li>当容器中的网络服务需要被外部机器访问时，可以将容器中提供服务的端口映射到宿主机的端口上。外部机器访问宿主机的端口，从而间接访问容器的服务</li><li>这种操作称为：端口映射</li></ul><h5 id="4-1-4-部署MySQL"><a href="#4-1-4-部署MySQL" class="headerlink" title="4.1.4 部署MySQL"></a>4.1.4 部署MySQL</h5><ol><li><p>搜索mysql镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker search mysql<br></code></pre></td></tr></table></figure></li><li><p>拉取mysql镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull mysql:5.6<br></code></pre></td></tr></table></figure></li><li><p>创建容器，设置端口映射、目录映射</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">在/root目录下创建mysql目录用于存储mysql数据信息</span><br>mkdir ~/mysql<br>cd ~/mysql<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -id \<br>-p 3307:3306 \<br>--name=c_mysql \<br>-v $PWD/conf:/etc/mysql/conf.d \<br>-v $PWD/logs:/logs \<br>-v $PWD/data:/var/lib/mysql \<br>-e MYSQL_ROOT_PASSWORD=123456 \<br>mysql:5.6<br></code></pre></td></tr></table></figure><ul><li>参数说明<ul><li><code>-p 3307:3306</code>：将容器的3306端口映射到宿主机的3307端口</li><li><code>--v $PWD/conf:/etc/mysql/conf.d</code>：将主机当前目录下的<code>conf/my.cnf</code>挂载到容器<code>/etc/mysql/my.cnf</code>配置目录</li><li><code>-v $PWD/logs:/logs</code>：将主机当前目录下的<code>logs</code>目录挂载到容器的<code>/logs</code>目录日志</li><li><code>-v $PWD/data:/var/lib/mysql</code>：将主机当前目录下的<code>data</code>目录挂载到容器的<code>/var/lib/mysql</code>数据目录</li><li><code>-e MYSQL_ROOT_PASSWORD=123456</code>：初始化root 用户密码</li></ul></li></ul></li><li><p>使用外部机器访问MySQL</p></li></ol><h3 id="4-2-Tomcat部署"><a href="#4-2-Tomcat部署" class="headerlink" title="4.2 Tomcat部署"></a>4.2 Tomcat部署</h3><ol><li><p>搜索Tomcat 镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker search tomcat<br></code></pre></td></tr></table></figure></li><li><p>拉取mysql镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull tomcat<br></code></pre></td></tr></table></figure></li><li><p>创建容器，设置端口映射、目录映射</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">在/root目录下创建tomcat目录用于存放tomcat数据信息</span><br>mkdir ~/tomcat<br>cd ~/tomcat<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -id --name=c_tomcat \<br>-p 8080:8080 \<br>-v $PWD:/usr/local/tomcat/webapps \<br>tomcat<br></code></pre></td></tr></table></figure><ul><li>参数说明：<ul><li><code>-p 8080:8080</code>：将容器的8080端口映射到主机的8080端口</li><li><code>-v $PWD:/usr/local/tomcat/webapps</code>：将主机中当前目录挂载到容器的<code>webapps</code></li></ul></li></ul></li><li><p>最后使用外部机器访问tomcat</p></li></ol><h3 id="4-3-Nginx部署"><a href="#4-3-Nginx部署" class="headerlink" title="4.3 Nginx部署"></a>4.3 Nginx部署</h3><ol><li><p>搜索Nginx 镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker search nginx<br></code></pre></td></tr></table></figure></li><li><p>拉取mysql镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull nginx<br></code></pre></td></tr></table></figure></li><li><p>创建容器，设置端口映射、目录映射</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">在/root目录下创建nginx目录用于存储nginx数据信息</span><br>mkdir ~/nginx<br>cd ~/nginx<br>mkdir conf<br>cd conf<br><span class="hljs-meta prompt_">#</span><span class="language-bash">在~/nginx/conf/下创建nginx.conf文件，粘贴下面代码块的内容</span><br>vim nginx.conf<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs shel">user  nginx;<br>worker_processes  1;<br><br>error_log  /var/log/nginx/error.log warn;<br>pid        /var/run/nginx.pid;<br><br>events &#123;<br>    worker_connections  1024;<br>&#125;<br><br>http &#123;<br>    include       /etc/nginx/mime.types;<br>    default_type  application/octet-stream;<br><br>    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;<br>                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;<br>                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;<br><br>    access_log  /var/log/nginx/access.log  main;<br><br>    sendfile        on;<br>    #tcp_nopush     on;<br><br>    keepalive_timeout  65;<br><br>    #gzip  on;<br><br>include /etc/nginx/conf.d/*.conf;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker -run -id --name=c_nginx \<br>-p 80:800 \<br>-v $PWD/conf/nginx.conf:/etc/nginx/nginx.conf \<br>-v $PWD/logs:/var/log/nginx \<br>-v $PWD/html:/usr/share/nginx/html \<br>nginx<br></code></pre></td></tr></table></figure><ul><li>参数说明：<ul><li><code>-p 80:800</code>：将容器的80端口映射到宿主机的80端口</li><li><code>-v $PWD/conf/nginx.conf:/etc/nginx/nginx.conf</code>：将主机当前目录下的<code>/conf/nginx.conf</code>挂载到容器的<code>:/etc/nginx/nginx.conf</code>配置目录</li><li><code>-v $PWD/html:/usr/share/nginx/html</code>：将主机当前目录挂载到容器的<code>/val/log/nginx</code>日志目录</li></ul></li></ul></li><li><p>使用外部机器访问nginx</p></li></ol><h3 id="4-4-Redis部署"><a href="#4-4-Redis部署" class="headerlink" title="4.4 Redis部署"></a>4.4 Redis部署</h3><ol><li><p>搜索Redis 镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker search redis<br></code></pre></td></tr></table></figure></li><li><p>拉取Redis 镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull redis:5.0<br></code></pre></td></tr></table></figure></li><li><p>创建容器，设置端口映射、目录映射</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -id --name=c_redis -p 6379:6379 redis:5.0<br></code></pre></td></tr></table></figure></li><li><p>使用外部机器连接redis</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">redis-cli.exe -h 192.168.187.129 -p 6379<br></code></pre></td></tr></table></figure></li></ol><h2 id="第五章-Dockerfile"><a href="#第五章-Dockerfile" class="headerlink" title="第五章 Dockerfile"></a>第五章 Dockerfile</h2><h3 id="5-1-Docker-镜像原理"><a href="#5-1-Docker-镜像原理" class="headerlink" title="5.1 Docker 镜像原理"></a>5.1 Docker 镜像原理</h3><p>​思考：</p><ul><li>Docker 镜像的本质是什么？<ul><li>是一个分层的文件系统</li></ul></li><li>Docker 中一个CentOS 镜像为什么只有200MB，而一个CentOS 操作系统的iso 文件要几个G？<ul><li>CentOS的iso镜像文件包含bootfs和rootfs，而Docker的CentOS镜像复用操作系统的bootfs，只有rootfs和其他镜像层</li></ul></li><li>Docker 中一个Tomcat 镜像为什么有500MB，而一个Tomcat 安装包只有70多MB？<ul><li>由于Docker中镜像是分层的，tomcat虽然只有70多MB，但他需要依赖于父镜像和基础镜像，所以整个对外暴露的tomcat镜像大小500多MB</li></ul></li></ul><p>操作系统组成部分：</p><ul><li>进程调度子系统</li><li>进程通信子系统</li><li>内存管理子系统</li><li>设备管理子系统</li><li>文件管理子系统</li><li>网络通信子系统</li><li>作业控制子系统</li></ul><p>Linux文件系统由bootfs 和rootfs 两部分组成</p><ul><li>bootfs：包含bootloader（引导加载程序）和kernel（内核）</li><li>rootfs：root文件系统，包含的就是典型的Linux 系统中的&#x2F;dev、&#x2F;proc、&#x2F;bin等标准目录和文件</li><li>不同的Linux 发行版，bootfs 基本一样，而rootfs 不同，如ubuntu，CentOS等</li></ul><p><strong>Docker 镜像原理：</strong></p><ul><li>Docker 镜像是由特殊的文件系统叠加而成</li><li>最低端是bootfs，并使用宿主机的bootfs</li><li>第二层是root 文件系统rootfs ，称为base iamge</li><li>然后再往上可以叠加其他的镜像文件</li><li>统一文件系统（Union File System）技术能够将不同的层整合成一个文件系统，为这些层提供了一个统一的视角，这样就隐藏了多层的存在，在用户的角度看来，只存在一个文件系统</li><li>一个镜像可以放在另一个镜像的上面。位于下面的镜像称为父镜像，最底部的镜像称为基础镜像</li><li>当从一个镜像启动容器时，Docker会在最顶层加载一个读写文件系统作为容器</li></ul><p><strong>镜像制作：</strong></p><ul><li><p>容器转为镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker commit 容器id 镜像名称:版本号<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shel">docker save -o 压缩文件名称 镜像名称:版本号<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker load -i 压缩文件名称<br></code></pre></td></tr></table></figure></li></ul><h3 id="5-2-Dockerfile-概念及作用"><a href="#5-2-Dockerfile-概念及作用" class="headerlink" title="5.2 Dockerfile 概念及作用"></a>5.2 Dockerfile 概念及作用</h3><p><strong>Dockerfile 概念</strong></p><ul><li>Dockerfile 是一个文本文件</li><li>包含了一条条的指令</li><li>每一条指令构建一层，基于基础镜像，最终构建出一个新的镜像</li><li>对于开发人员，可以为开发团队提供一个完全一致的开发环境</li><li>对于测试人员，可以直接拿开发时所构建的镜像或者通过Dockerfile 文件构建一个新的镜像开始工作了</li><li>对于运维人员，在部署时，可以实现应用的无缝移植</li></ul><h3 id="5-3-Dockerfile-关键字"><a href="#5-3-Dockerfile-关键字" class="headerlink" title="5.3 Dockerfile 关键字"></a>5.3 Dockerfile 关键字</h3><table><thead><tr><th>关键字</th><th>作用</th><th align="left">备注</th></tr></thead><tbody><tr><td>FROM</td><td>指定父镜像</td><td align="left">指定dockerfile基于哪个images构建</td></tr><tr><td>MAINTAINER</td><td>作者信息</td><td align="left">用来标明这个dockerfile 谁写的</td></tr><tr><td>LABEL</td><td>标签</td><td align="left">用来指明dockerfile 的标签，可以使用Label代替Maintainer 最终都是在docker image基本信息中嗯可以查看</td></tr><tr><td>RUN</td><td>执行命令</td><td align="left">执行一段命令 默认是<code>/bin/sh</code> 格式：<code>RUN command</code> 或者 <code>RUN [&quot;command&quot;,&quot;param1&quot;,&quot;param2&quot;]</code></td></tr><tr><td>CMD</td><td>容器启动命令</td><td align="left">提供启动容器时候的默认命令和ENTRYPOINT配合使用。格式：<code>CMD command param1 param2</code>或者<code>CMD [&quot;command&quot;,&quot;param1&quot;,&quot;param2&quot;]</code></td></tr><tr><td>ENTRYPOINT</td><td>入口</td><td align="left">一般在制作一些执行就关闭的容器中会使用</td></tr><tr><td>COPY</td><td>复制文件</td><td align="left">build 的时候复制文件到image中</td></tr><tr><td>ADD</td><td>添加文件</td><td align="left">build 的时候添加文件到iamge 中，不仅仅局限于当前build 上下文 可以来源于远程服务</td></tr><tr><td>ENV</td><td>环境变量</td><td align="left">指定build 时候的环境变量 可以在启动容器的时候 通过<code>-e</code>覆盖  格式：<code>ENV name = value</code></td></tr><tr><td>ARG</td><td>构建参数</td><td align="left">构建参数 只在构建的时候使用参时 如果有ENV 那么ENV 的相同名字的值始终覆盖ARG 的值</td></tr><tr><td>VOLUME</td><td>定义外部可以挂载的数据卷</td><td align="left">指定build 的image 那些目录可以启动的时候挂载到文件系统中 启动容器的时候使用<code>-v</code>绑定 格式：<code>VOLUME [&quot;目录&quot;]</code></td></tr><tr><td>EXPOSE</td><td>暴露端口</td><td align="left">定义容器运行的时候监听的端口 启动容器的使用<code>-p</code>来绑定暴露端口 格式：<code>EXPOSE 8080</code>或者<code>EXPOSE 8080/udp</code></td></tr><tr><td>WORKDIR</td><td>工作目录</td><td align="left">指定容器内部的工作目录 如果没有创建则自动创建 如果指定&#x2F;使用是绝对地址 如果不是&#x2F;开头那么实在上一条workdir 的路径的相对路径</td></tr><tr><td>USER</td><td>指定执行用户</td><td align="left">指定build 或者启动的时候 用户 在RUN CMD ENTRYPOINT执行的时候的用户</td></tr><tr><td>HEALTHCHECK</td><td>健康检查</td><td align="left">指定监测当前容器的健康测试的命令 基本上没有 因为很多时候 应用本身由健康监测机制</td></tr><tr><td>ONBUILD</td><td>触发器</td><td align="left">当存在ONBUILD 关键字的镜像作为基础镜像的时候 当执行FROM 完成之后 会执行ONBUILD的命令 但是不影响当前镜像 用处也不怎么大</td></tr><tr><td>STOPSIGNAL</td><td>发送信息量到宿主机</td><td align="left">该STOPSIGNAL指令设置将发送到容器的系统调用信号以退出</td></tr><tr><td>SHELL</td><td>指定执行脚本的shell</td><td align="left">指定RUN CMD ENTRYPOINT 执行命令的时候 使用的shell</td></tr></tbody></table><h3 id="5-4-案例"><a href="#5-4-案例" class="headerlink" title="5.4 案例"></a>5.4 案例</h3><h4 id="5-4-1-案例一"><a href="#5-4-1-案例一" class="headerlink" title="5.4.1 案例一"></a>5.4.1 案例一</h4><p>需求：</p><p>​自定义CentOS7镜像。要求：</p><ol><li>默认登录路径为<code>/usr</code></li><li>可以使用vim</li></ol><p>实现步骤：</p><ol><li>定义父镜像：<code>FROM centos:7</code></li><li>定义作者信息：<code>MAINTAINER crisp077 &lt;www.crisp077.xyz&gt;</code></li><li>执行安装vim命令：<code>RUN yum install -y vim</code></li><li>定义默认的工作目录：<code>WORKDIR /usr</code></li><li>定义容器启动执行的命令：<code>CMD /bin/bash</code></li></ol><p>创建使用dockerfile的镜像：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker build -f ./centos_docker -t crisp_centos:1 .<br></code></pre></td></tr></table></figure><h4 id="5-4-2-案例二"><a href="#5-4-2-案例二" class="headerlink" title="5.4.2 案例二"></a>5.4.2 案例二</h4><p>需求：</p><p>​定义dockerfile，发布springboot 项目</p><p>实现步骤：</p><ol><li>定义父镜像：<code>FROM java:8</code></li><li>定义作者信息：<code>MAINTAINER crisp077 &lt;www.crisp077.xyz&gt;</code></li><li>将jar包添加到容器：<code>ADD springboot.jar app.jar</code></li><li>定义容器启动执行的命令：<code>CMD java -jar app.jar</code></li><li>通过dockerfile 构建镜像：<code>docker build -f dockerfile文件路径 -t 镜像名称:版本</code></li></ol><h2 id="第六章-Docker-服务编排"><a href="#第六章-Docker-服务编排" class="headerlink" title="第六章 Docker 服务编排"></a>第六章 Docker 服务编排</h2><h3 id="6-1-服务编排的概念"><a href="#6-1-服务编排的概念" class="headerlink" title="6.1 服务编排的概念"></a>6.1 服务编排的概念</h3><p>​微服务架构的应用系统中一般包含若干个微服务，每个微服务都会部署多个实例，如果每个微服务都要手动启动，维护工作量会很大</p><ul><li>要从Dockerfile build image 或者去 dockerhub 拉取image</li><li>要创建多个container</li><li>要管理这些container（启动停止删除）</li></ul><p><strong>服务编排：</strong></p><p>​按照一定的业务规则批量管理容器</p><h3 id="6-2-Dockers-Compose-概述"><a href="#6-2-Dockers-Compose-概述" class="headerlink" title="6.2 Dockers Compose 概述"></a>6.2 Dockers Compose 概述</h3><p>​Docker Compose 是一个编排多容器分布式部署的工具，提供命令集管理器化应用的完整开发期，包括服务构建，启动和停止。使用步骤：</p><ol><li>利用 Dockerfile 定义运行环境镜像</li><li>使用 docker-compose.yml 定义组成应用的各服务</li><li>运行 docker-compose up 启动应用</li></ol><h5 id="6-2-1-安装Docker-Compose"><a href="#6-2-1-安装Docker-Compose" class="headerlink" title="6.2.1 安装Docker Compose"></a>6.2.1 安装Docker Compose</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">Compose 目前已经完全支持Linux、MAC OS、Windows，在安装Compose之前，需要先安装Docker。下面以编译好的二进制包方式安装在Linux中</span><br>curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-&#x27;uname -s&#x27;-&#x27;uname -m&#x27; -o /usr/local/bin/docker-compose<br><span class="hljs-meta prompt_">#</span><span class="language-bash">设置文件可执行权限</span><br>chmod +x /usr/local/bin/docker-compose<br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看版本信息</span><br>docker-compose -version<br></code></pre></td></tr></table></figure><h5 id="6-2-2-卸载Docker-Compose"><a href="#6-2-2-卸载Docker-Compose" class="headerlink" title="6.2.2 卸载Docker Compose"></a>6.2.2 卸载Docker Compose</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">二进制包方式安装的，删除二进制文件即可</span><br>rm /usr/local/bin/docker-compose<br></code></pre></td></tr></table></figure><h3 id="6-3-案例"><a href="#6-3-案例" class="headerlink" title="6.3 案例"></a>6.3 案例</h3><p><strong>使用docker compose编排nginx+springboot项目</strong></p><ol><li><p>创建docker-compose目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir ~/docker-compose<br>cd ~/docker-compose<br></code></pre></td></tr></table></figure></li><li><p>编写<code>docker-compose.yml</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">version: &#x27;3&#x27;<br>services:<br>  nginx:<br>   iamge: nginx<br>   ports:<br>    - 80:80<br>   links:<br>    - app<br>   volumes:<br>   - ./nginx/conf.d:/etc/nginx/conf.d<br>   app:<br>     image: app<br>     expose:<br>       - &quot;8080&quot;<br></code></pre></td></tr></table></figure></li><li><p>创建<code>./nginx/conf.d</code>目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir -p ./nginx/conf.d<br></code></pre></td></tr></table></figure></li><li><p>在<code>./nginx/conf.d</code>目录下编写<code>crisp.conf</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">server &#123;<br>listen 80;<br>acess_log off;<br><br>location / &#123;<br>proxy_pass https://app:8080;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在<code>~/docker-compose</code>目录下 使用dockers-compose 启动容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker-compose up<br></code></pre></td></tr></table></figure></li><li><p>测试访问</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">http://192.168.187.129/hello<br></code></pre></td></tr></table></figure></li></ol><h2 id="第七章-Docker-私有仓库"><a href="#第七章-Docker-私有仓库" class="headerlink" title="第七章 Docker 私有仓库"></a>第七章 Docker 私有仓库</h2><h3 id="7-1-搭建私有仓库"><a href="#7-1-搭建私有仓库" class="headerlink" title="7.1 搭建私有仓库"></a>7.1 搭建私有仓库</h3><p>​<strong>Docker 私有仓库</strong></p><ul><li>Docker 官方的Docker hub（<a href="https://hub.docker.com)是一个用于管理公共镜像的仓库,我们可以从上面拉取镜像到本地,也可以把我们自己的镜像推送上去.但是,有时候我们的服务器无法访问互联网,或者你不希望将自己的镜像放到公网当中,那么我们就需要搭建自己的私有仓库来存储和管理自己的镜像./">https://hub.docker.com）是一个用于管理公共镜像的仓库，我们可以从上面拉取镜像到本地，也可以把我们自己的镜像推送上去。但是，有时候我们的服务器无法访问互联网，或者你不希望将自己的镜像放到公网当中，那么我们就需要搭建自己的私有仓库来存储和管理自己的镜像。</a></li></ul><p><strong>私有仓库搭建</strong></p><ol><li><p>拉取私有仓库镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull registry<br></code></pre></td></tr></table></figure></li><li><p>启动私有仓库容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -id --name=registry -p 5000:5000 registry<br></code></pre></td></tr></table></figure></li><li><p>打开浏览器，输入地址<code>https://私有仓库服务器ip:5000/v2/_catalog</code>看到<code>&#123;&quot;repositories&quot;:[]&#125;</code>表示私有仓库搭建成功</p></li><li><p>修改<code>deamon.json</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/docker/daemon.json<br><span class="hljs-meta prompt_">#</span><span class="language-bash">在上述文件中添加一个key，保存退出。</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">此步用于让docker信任私有仓库地址</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">注意将私有仓库服务器ip修改为自己私有仓库服务器真实ip</span><br>&#123;&quot;insecure-registries&quot;: [&quot;私有仓库服务器ip:5000&quot;]&#125;<br></code></pre></td></tr></table></figure></li><li><p>重启docker 服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl restart docker<br>docker start registry<br></code></pre></td></tr></table></figure></li></ol><h3 id="7-2-上传镜像到私有仓库"><a href="#7-2-上传镜像到私有仓库" class="headerlink" title="7.2 上传镜像到私有仓库"></a>7.2 上传镜像到私有仓库</h3><ol><li><p>标记镜像为私有仓库的镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker tag centos:7 私有仓库服务器ip:5000/centos:7<br></code></pre></td></tr></table></figure></li><li><p>上传标记的镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker push 私有仓库服务器ip:5000/centos:7<br></code></pre></td></tr></table></figure></li></ol><h3 id="7-3-从私有仓库拉取镜像"><a href="#7-3-从私有仓库拉取镜像" class="headerlink" title="7.3 从私有仓库拉取镜像"></a>7.3 从私有仓库拉取镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">拉取镜像</span><br>docker pull 私有仓库服务器ip:5000/centos:7<br></code></pre></td></tr></table></figure><h2 id="第八章-Docker-相关概念"><a href="#第八章-Docker-相关概念" class="headerlink" title="第八章 Docker 相关概念"></a>第八章 Docker 相关概念</h2><p><strong>Docker容器虚拟化 与 传统虚拟机比较</strong></p><p>容器就是将软件打包成标准化单元，以用于开发、交付和部署</p><ul><li>容器镜像是轻量级的、可执行的独立软件包，包含软件运行所需要的所有内容：代码、运行时环境、系统工具、系统库和设置</li><li>容器化软件在任何环境中都能够始终如一地运行</li><li>容器赋予了软件独立性，使其免受外在环境差异的影响，从而有助于减少团队间在相同基础设施上运行不同软件时的冲突</li></ul><p><strong>相同：</strong></p><ul><li>容器和虚拟机具有相似的资源隔离和分配优势</li></ul><p><strong>不同：</strong></p><ul><li>容器虚拟化的是操作系统，虚拟机虚拟化的时硬件</li><li>传统的虚拟机可以运行不同的操作系统，容器只能运行同一类型的操作系统</li></ul><table><thead><tr><th>特性</th><th>容器</th><th>虚拟机</th></tr></thead><tbody><tr><td>启动</td><td>秒级</td><td>分钟级</td></tr><tr><td>性能</td><td>接近原生</td><td>弱于</td></tr><tr><td>系统支持两</td><td>单机支持上千个容器</td><td>一般几十个</td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker配置ubuntu镜像</title>
    <link href="/2023/04/27/docker%E9%85%8D%E7%BD%AEubuntu%E9%95%9C%E5%83%8F/"/>
    <url>/2023/04/27/docker%E9%85%8D%E7%BD%AEubuntu%E9%95%9C%E5%83%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="进入ubuntu"><a href="#进入ubuntu" class="headerlink" title="进入ubuntu"></a>进入ubuntu</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker exec -it Ubuntu-vscode <span class="hljs-regexp">/bin/</span>zsh<br>docker exec -it ubuntuvolumes <span class="hljs-regexp">/bin/</span>zsh<br></code></pre></td></tr></table></figure><h2 id="windows挂载本地路径到容器"><a href="#windows挂载本地路径到容器" class="headerlink" title="windows挂载本地路径到容器"></a>windows挂载本地路径到容器</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker run -it -d --name ubuntuvolumes -v E:<span class="hljs-regexp">//</span>vsproject:<span class="hljs-regexp">/home/</span>vsproject ubuntu <span class="hljs-regexp">/bin/</span>bash<br></code></pre></td></tr></table></figure><h2 id="配置过程"><a href="#配置过程" class="headerlink" title="配置过程"></a>配置过程</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker --version<br>docker-compose --version<br>docker pull ubuntu  # 获取 ubuntu 镜像<br>docker image ls  # 查看当前安装的Docker镜像<br> <br>docker run -i -t --name ubuntuTest ubuntu bash  # 创建并运行一个可以使用终端交互的 ubuntu 容器<br>cat /etc/issue  # 查看ubuntu系统版本<br>control d  # 退出容器<br> <br>docker ps  # 查看当前运行的容器<br>docker ps -a  # 列出所有容器信息，包括已经关闭的。<br>docker start -i ubuntuTest  # -i启动容器，可以进入终端交互。<br> <br>apt-get update  # 更新软件源信息<br>apt-get install vim  # 安装 vim<br>apt-get install git python3  # 安装 git 和 python3<br> <br>vim /etc/apt/sources.list  # 更新软件源<br>deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse  <br> <br>apt-get install openssh-server  # 安装 openssh-server,用于开启 ssh 服务供外部连接。<br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装中途选择的 6-Asia   70-shanghai</span><br> <br>vim /etc/ssh/sshd_config  # 更改 sshd 的默认配置 去掉下面3处的注释符#<br>34行，PermitRootLogin prohibit-password<br>39行，PubkeyAuthentication yes<br>42行，AuthorizedKeysFile      .ssh/authorized_keys .ssh/authorized_keys2<br> <br>/etc/init.d/ssh restart  # 重启sshd<br>mkdir ~/.ssh<br>touch ~/.ssh/authorized_keys<br><span class="hljs-meta prompt_"># </span><span class="language-bash">在本机mac终端，<span class="hljs-built_in">cat</span> ~/.ssh/id_rsa.pub  如果没有该文件，终端输入ssh-keygen，连续回车enter，即生成该文件；</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">将本机id_rsa.pub的一行内容，vim复制到docker容器的 ~/.ssh/authorized_keys中</span><br>control d<br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">以上完成了ubuntu的基本配置+ssh支持；  以下生成新的镜像版本</span><br>docker commit -m &#x27;add ssh&#x27; -a &#x27;fxd1991&#x27; d4b0fc9b1e81 ubuntu-ssh<br><span class="hljs-meta prompt_"># </span><span class="language-bash">-m，指定提交信息; -a，指定提交者; d4b0fc9b1e81是CONTAINER ID; ubuntu-ssh 是新镜像的名称</span><br> <br>docker rm ubuntuTest<br> <br>docker run -d -p 22222:22 --name ubuntuTest ubuntu-ssh /usr/sbin/sshd -D<br><span class="hljs-meta prompt_"># </span><span class="language-bash">-d 后台运行; -p 绑定宿主机的22222端口到ubuntu容器的22端口; --name 给容器取名为ubuntuTest;</span> <br><span class="hljs-meta prompt_"># </span><span class="language-bash">ubuntu-ssh 使用镜像ubuntu-ssh创建容器; /usr/sbin/sshd -D 指定容器启动使用的应用及参数;</span><br>ssh -p 22222 root@localhost  # 不输密码，直接进入容器ubuntuTest；<br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">在本机 macOS，vim ~/.ssh/config，添加如下内容：</span><br>Host ubuntuTest<br>    HostName localhost<br>    User     root<br>    Port     22222<br><span class="hljs-meta prompt_"># </span><span class="language-bash">然后可以 ssh ubuntuTest 连接容器。</span><br></code></pre></td></tr></table></figure><h2 id="进入容器的zsh"><a href="#进入容器的zsh" class="headerlink" title="进入容器的zsh"></a>进入容器的zsh</h2><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">docker exec -it <span class="hljs-number">0</span>a<span class="hljs-number">7e10</span>f<span class="hljs-number">27028</span><span class="hljs-keyword">c</span><span class="hljs-number">5</span>bf<span class="hljs-number">03</span>acaacafa<span class="hljs-number">539e381</span>d<span class="hljs-number">476</span>f<span class="hljs-number">0</span><span class="hljs-keyword">c</span><span class="hljs-number">0</span>f<span class="hljs-number">57815054988526</span>f<span class="hljs-number">7</span><span class="hljs-keyword">c</span><span class="hljs-number">76</span>bfb /bin/zsh<br></code></pre></td></tr></table></figure><h2 id="Docker-Engine配置"><a href="#Docker-Engine配置" class="headerlink" title="Docker Engine配置"></a>Docker Engine配置</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;builder&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;gc&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;defaultKeepStorage&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;20GB&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;enabled&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;experimental&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;features&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;buildkit&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;registry-mirrors&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;http://hub-mirror.c.163.com&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;https://registry.docker-cn.com&quot;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leveldb入门</title>
    <link href="/2023/04/22/leveldb%E5%85%A5%E9%97%A8/"/>
    <url>/2023/04/22/leveldb%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="leveldb简介"><a href="#leveldb简介" class="headerlink" title="leveldb简介"></a>leveldb简介</h1><pre><code class="hljs"> LevelDb是能够处理十亿级别规模Key-Value型数据持久性存储的嵌入式数据库，内部没有设计成C/S网络结构，必须和服务部署在同一台服务器。levelDB其实也是一个C++程序库，是可以可以被编译和链接到我们自己的程序中的库，而不是像Redis那样是一个数据库服务器。LevelDb本质上是一个存储引擎，即一套存储系统以及在这套存储系统上提供的一些操作接口。LevelDb有如下一些特点：</code></pre><ul><li>首先，LevelDb是一个持久化存储的KV系统，和Redis这种内存型的KV系统不同，redis是一个内存数据库，它是将KV写入内存中，而LevelDb不会像Redis一样狂吃内存，而是将大部分数据存储到磁盘上。从某种意义上说，redis是非持久化的，而levelDB是实时持久化的。</li><li>key、value支持任意的byte类型数组，不单单支持字符串</li><li>其次，LevelDb在存储数据时，是根据记录的key值有序存储的，就是说相邻的key值在存储文件中是依次顺序存储的，而应用可以自定义key大小比较函数，LevleDb会按照用户定义的比较函数依序存储这些记录。</li><li>再次，像大多数KV系统一样，LevelDb的操作接口很简单，基本操作包括写记录，读记录以及删除记录。也支持针对多条操作的原子批量操作。</li><li>另外，LevelDb支持数据快照（snapshot）功能，使得读取操作不受写操作影响，可以在读操作过程中始终看到一致的数据。</li><li>除此外，LevelDb还支持数据压缩等操作，这对于减小存储空间以及增快IO效率都有直接的帮助。</li><li>LSM典型实现，适合写多读少。</li></ul><h1 id="编译-amp-安装"><a href="#编译-amp-安装" class="headerlink" title="编译&amp;安装"></a>编译&amp;安装</h1><ul><li>源码下载</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/google/leveldb.git<br>git submodule update --init<br></code></pre></td></tr></table></figure><ul><li>执行编译</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd leveldb<br>mkdir -p build &amp;&amp; cd build <br>cmake -DCMAKE_BUILD_TYPE=Release .. &amp;&amp; cmake --build .<br></code></pre></td></tr></table></figure><ul><li>头文件加入系统目录(可选)</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cp -r ./include/leveldb /usr/include/<br></code></pre></td></tr></table></figure><ul><li>编写demo</li><li>编译demo</li></ul><p>g++ -o xxx xxx.cpp libleveldb.a -lpthread</p><p>测试程序如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cassert&gt;</span></span><br> <br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;leveldb/db.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;leveldb/write_batch.h&quot;</span></span><br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// Open a database.</span><br>    leveldb::DB* db;<br>    leveldb::Options opts;<br>    opts.create_if_missing = <span class="hljs-literal">true</span>;<br>    leveldb::Status status = leveldb::DB::<span class="hljs-built_in">Open</span>(opts, <span class="hljs-string">&quot;./testdb&quot;</span>, &amp;db);<br>    <span class="hljs-built_in">assert</span>(status.<span class="hljs-built_in">ok</span>());<br>    <br>    <span class="hljs-comment">// Write data.</span><br>    status = db-&gt;<span class="hljs-built_in">Put</span>(leveldb::<span class="hljs-built_in">WriteOptions</span>(), <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;jinhelin&quot;</span>);<br>    <span class="hljs-built_in">assert</span>(status.<span class="hljs-built_in">ok</span>());<br> <br>    <span class="hljs-comment">// Read data.</span><br>    std::string val;<br>    status = db-&gt;<span class="hljs-built_in">Get</span>(leveldb::<span class="hljs-built_in">ReadOptions</span>(), <span class="hljs-string">&quot;name&quot;</span>, &amp;val);<br>    <span class="hljs-built_in">assert</span>(status.<span class="hljs-built_in">ok</span>());<br>    std::cout &lt;&lt; val &lt;&lt; std::endl;<br> <br>    <span class="hljs-comment">// Batch atomic write.</span><br>    leveldb::WriteBatch batch;<br>    batch.<span class="hljs-built_in">Delete</span>(<span class="hljs-string">&quot;name&quot;</span>);<br>    batch.<span class="hljs-built_in">Put</span>(<span class="hljs-string">&quot;name0&quot;</span>, <span class="hljs-string">&quot;jinhelin0&quot;</span>);<br>    batch.<span class="hljs-built_in">Put</span>(<span class="hljs-string">&quot;name1&quot;</span>, <span class="hljs-string">&quot;jinhelin1&quot;</span>);<br>    batch.<span class="hljs-built_in">Put</span>(<span class="hljs-string">&quot;name2&quot;</span>, <span class="hljs-string">&quot;jinhelin2&quot;</span>);<br>    batch.<span class="hljs-built_in">Put</span>(<span class="hljs-string">&quot;name3&quot;</span>, <span class="hljs-string">&quot;jinhelin3&quot;</span>);<br>    batch.<span class="hljs-built_in">Put</span>(<span class="hljs-string">&quot;name4&quot;</span>, <span class="hljs-string">&quot;jinhelin4&quot;</span>);<br>    batch.<span class="hljs-built_in">Put</span>(<span class="hljs-string">&quot;name5&quot;</span>, <span class="hljs-string">&quot;jinhelin5&quot;</span>);<br>    batch.<span class="hljs-built_in">Put</span>(<span class="hljs-string">&quot;name6&quot;</span>, <span class="hljs-string">&quot;jinhelin6&quot;</span>);<br>    batch.<span class="hljs-built_in">Put</span>(<span class="hljs-string">&quot;name7&quot;</span>, <span class="hljs-string">&quot;jinhelin7&quot;</span>);<br>    batch.<span class="hljs-built_in">Put</span>(<span class="hljs-string">&quot;name8&quot;</span>, <span class="hljs-string">&quot;jinhelin8&quot;</span>);<br>    batch.<span class="hljs-built_in">Put</span>(<span class="hljs-string">&quot;name9&quot;</span>, <span class="hljs-string">&quot;jinhelin9&quot;</span>);<br>    status = db-&gt;<span class="hljs-built_in">Write</span>(leveldb::<span class="hljs-built_in">WriteOptions</span>(), &amp;batch);<br>    <span class="hljs-built_in">assert</span>(status.<span class="hljs-built_in">ok</span>());<br> <br>    <span class="hljs-comment">// Scan database.</span><br>    leveldb::Iterator* it = db-&gt;<span class="hljs-built_in">NewIterator</span>(leveldb::<span class="hljs-built_in">ReadOptions</span>());<br>    <span class="hljs-keyword">for</span> (it-&gt;<span class="hljs-built_in">SeekToFirst</span>(); it-&gt;<span class="hljs-built_in">Valid</span>(); it-&gt;<span class="hljs-built_in">Next</span>()) &#123;<br>        std::cout &lt;&lt; it-&gt;<span class="hljs-built_in">key</span>().<span class="hljs-built_in">ToString</span>() &lt;&lt; <span class="hljs-string">&quot;: &quot;</span> &lt;&lt; <br>          it-&gt;<span class="hljs-built_in">value</span>().<span class="hljs-built_in">ToString</span>() &lt;&lt; std::endl;<br>    &#125;<br>    <span class="hljs-built_in">assert</span>(it-&gt;<span class="hljs-built_in">status</span>().<span class="hljs-built_in">ok</span>());<br>    <br>    <span class="hljs-comment">// Range scan, example: [name3, name8)</span><br>    <span class="hljs-keyword">for</span> (it-&gt;<span class="hljs-built_in">Seek</span>(<span class="hljs-string">&quot;name3&quot;</span>); <br>         it-&gt;<span class="hljs-built_in">Valid</span>() &amp;&amp; it-&gt;<span class="hljs-built_in">key</span>().<span class="hljs-built_in">ToString</span>() &lt; <span class="hljs-string">&quot;name8&quot;</span>; <br>         it-&gt;<span class="hljs-built_in">Next</span>()) &#123;<br>        std::cout &lt;&lt; it-&gt;<span class="hljs-built_in">key</span>().<span class="hljs-built_in">ToString</span>() &lt;&lt; <span class="hljs-string">&quot;: &quot;</span> &lt;&lt; <br>          it-&gt;<span class="hljs-built_in">value</span>().<span class="hljs-built_in">ToString</span>() &lt;&lt; std::endl;<br>    &#125; <br> <br>    <span class="hljs-comment">// Close a database.</span><br>    <span class="hljs-keyword">delete</span> db;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="教程网站"><a href="#教程网站" class="headerlink" title="教程网站"></a>教程网站</h1><p><a href="https://zhuanlan.zhihu.com/p/80684560">leveldb源码阅读系列 - 知乎 (zhihu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/560749237">到处抄来的LevelDB笔记 - 知乎 (zhihu.com)</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>leveldb</tag>
      
      <tag>Database</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>QT-读写ini配置文件</title>
    <link href="/2023/04/22/QT-%E8%AF%BB%E5%86%99ini%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <url>/2023/04/22/QT-%E8%AF%BB%E5%86%99ini%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="写ini"><a href="#写ini" class="headerlink" title="写ini"></a>写ini</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//创建QSettings对象并指定ini文件路径并将格式设置为ini</span><br>            <span class="hljs-function">QSettings <span class="hljs-title">setting</span><span class="hljs-params">(<span class="hljs-string">&quot;./userprofile.ini&quot;</span>, QSettings::IniFormat)</span></span>;<br>               <span class="hljs-comment">//创建第一个分组(创建分组的第一种方法)</span><br>               setting.<span class="hljs-built_in">beginGroup</span>(<span class="hljs-string">&quot;logininfo&quot;</span>);<br>               <span class="hljs-comment">//添加第一个分组中的键值对</span><br>               setting.<span class="hljs-built_in">setValue</span>(<span class="hljs-string">&quot;username&quot;</span>, username);<br>               setting.<span class="hljs-built_in">setValue</span>(<span class="hljs-string">&quot;password&quot;</span>, password);<br>               setting.<span class="hljs-built_in">setValue</span>(<span class="hljs-string">&quot;ip&quot;</span>, ipaddr);<br>               <span class="hljs-comment">//设置当前分组结束</span><br>               setting.<span class="hljs-built_in">endGroup</span>();<br>               <span class="hljs-comment">//添加第二个分组以及其键值对（创建分组的第二种方法）</span><br>               setting.<span class="hljs-built_in">setValue</span>(<span class="hljs-string">&quot;checkinfo/rempas&quot;</span>, <span class="hljs-literal">true</span>);<br>               setting.<span class="hljs-built_in">setValue</span>(<span class="hljs-string">&quot;checkinfo/remprinter&quot;</span>, <span class="hljs-string">&quot;zhi2&quot;</span>);<br>               setting.<span class="hljs-built_in">setValue</span>(<span class="hljs-string">&quot;checkinfo/remtest&quot;</span>, <span class="hljs-string">&quot;sameZhi&quot;</span>);<br></code></pre></td></tr></table></figure><h1 id="读ini"><a href="#读ini" class="headerlink" title="读ini"></a>读ini</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//创建QSettings对象并指定ini文件路径并将格式设置为ini</span><br>    <span class="hljs-function">QSettings <span class="hljs-title">setting</span><span class="hljs-params">(<span class="hljs-string">&quot;./userprofile.ini&quot;</span>, QSettings::IniFormat)</span></span>;<br>    <span class="hljs-keyword">if</span>(setting.<span class="hljs-built_in">value</span>(<span class="hljs-string">&quot;/checkinfo/rempas&quot;</span>).<span class="hljs-built_in">toString</span>()==<span class="hljs-string">&quot;true&quot;</span>)&#123;<br>            <span class="hljs-comment">//设置IP地址&quot;43.134.167.160&quot;</span><br>            ui-&gt;ipaddline-&gt;<span class="hljs-built_in">setText</span>(setting.<span class="hljs-built_in">value</span>(<span class="hljs-string">&quot;/logininfo/ip&quot;</span>).<span class="hljs-built_in">toString</span>());<br>            <span class="hljs-comment">//设置用户名</span><br>            ui-&gt;usernameline-&gt;<span class="hljs-built_in">setText</span>(setting.<span class="hljs-built_in">value</span>(<span class="hljs-string">&quot;/logininfo/username&quot;</span>).<span class="hljs-built_in">toString</span>());<br>            <span class="hljs-comment">//设置用户名</span><br>            ui-&gt;passwordline-&gt;<span class="hljs-built_in">setText</span>(setting.<span class="hljs-built_in">value</span>(<span class="hljs-string">&quot;/logininfo/password&quot;</span>).<span class="hljs-built_in">toString</span>());<br>            ui-&gt;rempas-&gt;<span class="hljs-built_in">setChecked</span>(<span class="hljs-literal">true</span>);<br>        &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>QT</tag>
      
      <tag>CPP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>QT-剪贴板操作</title>
    <link href="/2023/04/22/QT-%E5%89%AA%E8%B4%B4%E6%9D%BF%E6%93%8D%E4%BD%9C/"/>
    <url>/2023/04/22/QT-%E5%89%AA%E8%B4%B4%E6%9D%BF%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="剪贴板操作"><a href="#剪贴板操作" class="headerlink" title="剪贴板操作"></a>剪贴板操作</h1><p>剪贴板的操作经常和前面所说的拖放技术在一起使用，因此我们现在先来说说剪贴板的相关操作。大家对剪贴板都很熟悉。我们可以简单的把它理解成一个数据的存储池，可以把外面的数据放置进去，也可以把里面的数据取出来。剪贴板是由操作系统维护的，所以这提供了跨应用程序数据交互的一种方式。Qt 已经为我们封装好很多关于剪贴板的操作，因此我们可以在自己的应用中很容易的实现。下面还是从代码开始:</p><h2 id="clipboarddemo-h"><a href="#clipboarddemo-h" class="headerlink" title="clipboarddemo.h"></a>clipboarddemo.h</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> CLIPBOARDDEMO_H  </span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CLIPBOARDDEMO_H  </span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QtGui/QWidget&gt;</span>  </span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ClipboardDemo</span> : <span class="hljs-keyword">public</span> QWidget  <br>&#123;  <br>    Q_OBJECT  <br><br><span class="hljs-keyword">public</span>:  <br>    <span class="hljs-built_in">ClipboardDemo</span>(QWidget *parent = <span class="hljs-number">0</span>);  <br><br><span class="hljs-keyword">private</span> slots:  <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setClipboard</span><span class="hljs-params">()</span></span>;  <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getClipboard</span><span class="hljs-params">()</span></span>;  <br>&#125;;  <br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// CLIPBOARDDEMO_H </span></span><br></code></pre></td></tr></table></figure><h2 id="clipboarddemo-cpp"><a href="#clipboarddemo-cpp" class="headerlink" title="clipboarddemo.cpp"></a>clipboarddemo.cpp</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QtGui&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;clipboarddemo.h&quot;</span>  </span><br><br>ClipboardDemo::<span class="hljs-built_in">ClipboardDemo</span>(QWidget *parent)  <br>    : <span class="hljs-built_in">QWidget</span>(parent)  <br>&#123;  <br>    QVBoxLayout *mainLayout = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QVBoxLayout</span>(<span class="hljs-keyword">this</span>);  <br>    QHBoxLayout *northLayout = <span class="hljs-keyword">new</span> QHBoxLayout;  <br>    QHBoxLayout *southLayout = <span class="hljs-keyword">new</span> QHBoxLayout;  <br><br>    QTextEdit *editor = <span class="hljs-keyword">new</span> QTextEdit;  <br>    QLabel *label = <span class="hljs-keyword">new</span> QLabel;  <br>    label-&gt;<span class="hljs-built_in">setText</span>(<span class="hljs-string">&quot;Text Input: &quot;</span>);  <br>    label-&gt;<span class="hljs-built_in">setBuddy</span>(editor);  <br>    QPushButton *copyButton = <span class="hljs-keyword">new</span> QPushButton;  <br>    copyButton-&gt;<span class="hljs-built_in">setText</span>(<span class="hljs-string">&quot;Set Clipboard&quot;</span>);  <br>    QPushButton *pasteButton = <span class="hljs-keyword">new</span> QPushButton;  <br>    pasteButton-&gt;<span class="hljs-built_in">setText</span>(<span class="hljs-string">&quot;Get Clipboard&quot;</span>);  <br><br>    northLayout-&gt;<span class="hljs-built_in">addWidget</span>(label);  <br>    northLayout-&gt;<span class="hljs-built_in">addWidget</span>(editor);  <br>    southLayout-&gt;<span class="hljs-built_in">addWidget</span>(copyButton);  <br>    southLayout-&gt;<span class="hljs-built_in">addWidget</span>(pasteButton);  <br>    mainLayout-&gt;<span class="hljs-built_in">addLayout</span>(northLayout);  <br>    mainLayout-&gt;<span class="hljs-built_in">addLayout</span>(southLayout);  <br><br>    <span class="hljs-built_in">connect</span>(copyButton, <span class="hljs-built_in">SIGNAL</span>(<span class="hljs-built_in">clicked</span>()), <span class="hljs-keyword">this</span>, <span class="hljs-built_in">SLOT</span>(<span class="hljs-built_in">setClipboard</span>()));  <br>    <span class="hljs-built_in">connect</span>(pasteButton, <span class="hljs-built_in">SIGNAL</span>(<span class="hljs-built_in">clicked</span>()), <span class="hljs-keyword">this</span>, <span class="hljs-built_in">SLOT</span>(<span class="hljs-built_in">getClipboard</span>()));  <br>&#125;  <br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ClipboardDemo::setClipboard</span><span class="hljs-params">()</span>  </span><br><span class="hljs-function"></span>&#123;  <br>    QClipboard *board = QApplication::<span class="hljs-built_in">clipboard</span>();  <br>    board-&gt;<span class="hljs-built_in">setText</span>(<span class="hljs-string">&quot;Text from Qt Application&quot;</span>);  <br>&#125;  <br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ClipboardDemo::getClipboard</span><span class="hljs-params">()</span>  </span><br><span class="hljs-function"></span>&#123;  <br>    QClipboard *board = QApplication::<span class="hljs-built_in">clipboard</span>();  <br>    QString str = board-&gt;<span class="hljs-built_in">text</span>();  <br>    QMessageBox::<span class="hljs-built_in">information</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;From clipboard&quot;</span>, str);  <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>QT</tag>
      
      <tag>CPP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git实际开发场景</title>
    <link href="/2023/04/22/Git%E5%AE%9E%E9%99%85%E5%BC%80%E5%8F%91%E5%9C%BA%E6%99%AF/"/>
    <url>/2023/04/22/Git%E5%AE%9E%E9%99%85%E5%BC%80%E5%8F%91%E5%9C%BA%E6%99%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="日常工作的Git流程"><a href="#日常工作的Git流程" class="headerlink" title="日常工作的Git流程"></a>日常工作的Git流程</h1><h2 id="工作流程1"><a href="#工作流程1" class="headerlink" title="工作流程1"></a>工作流程1</h2><p>1.git clone                &#x2F;&#x2F;到本地<br>2.git checkout -b xxx          &#x2F;&#x2F;切换至新分支xxx<br>（相当于复制了remote的仓库到本地的xxx分支上<br>3.修改或者添加本地代码（部署在硬盘的源文件上）<br>4.git diff          &#x2F;&#x2F;查看自己对代码做出的改变<br>5.git add       &#x2F;&#x2F;上传更新后的代码至暂存区<br>6.git commit -m 注释        &#x2F;&#x2F;可以将暂存区里更新后的代码更新到本地git<br>7.git push origin xxx     &#x2F;&#x2F;将本地的xxxgit分支上传至github上的git<br>-——————————————————————————————–<br>（如果在写自己的代码过程中发现远端GitHub上代码出现改变）<br>1.git checkout main        &#x2F;&#x2F;切换回main分支<br>2.git pull origin main      &#x2F;&#x2F;将远端修改过的代码再更新到本地</p><p>​(即将远程origin主机的master分支拉取过来和本地的当前分支进行合并)<br>3.git checkout xxx           &#x2F;&#x2F;回到xxx分支<br>4.git rebase main           &#x2F;&#x2F;我在xxx分支上，先把main移过来，然后根据我的commit来修改成新的内容<br>（中途可能会出现，rebase conflict —–》手动选择保留哪段代码）<br>5.git push -f origin xxx        &#x2F;&#x2F;把rebase后并且更新过的代码再push到远端github上<br>（-f —》强行）<br>6.原项目主人采用pull request 中的 squash and merge 合并所有不同的commit<br>-———————————————————————————————<br>远端完成更新后<br>1.git branch -d xxx 删除本地的git分支<br>2.git pull origin main 再把远端的最新代码拉至本地</p><h2 id="工作流程2"><a href="#工作流程2" class="headerlink" title="工作流程2"></a>工作流程2</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">git rebase <br><span class="hljs-keyword">while</span>(存在冲突) &#123;<br>    git status<br>    找到当前冲突文件，编辑解决冲突<br>    git add -u<br>    git rebase --<span class="hljs-built_in">continue</span><br>    <span class="hljs-keyword">if</span>( git rebase --abort )<br>        <span class="hljs-built_in">break</span>; <br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">git pull<br>编辑冲突文件<br>git add .<br>git commit -m <span class="hljs-string">&quot;feat: this is a comment&quot;</span><br>git push<br></code></pre></td></tr></table></figure><h2 id="删除其他分支"><a href="#删除其他分支" class="headerlink" title="删除其他分支"></a>删除其他分支</h2><p>这个是经常会用到的，因为本地开发多次之后，使用 <code>git branch</code> 之后会发现有很多分支还在，为了保证「干净卫生」，所以就了解一下，可以执行如下命令。</p><ul><li>增强命令（master）</li></ul><blockquote><p>可以删除除开 master 以外的分支，但类似 <code>mr/master/xxx</code> 这样的带有 master 的删除不了。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git stash &amp;&amp; git checkout master &amp;&amp; git branch | grep -v &quot;master&quot; | xargs git branch -D<br></code></pre></td></tr></table></figure><ul><li>增强命令（release）</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git stash &amp;&amp; git checkout release &amp;&amp; git branch | grep -v &quot;release&quot; | xargs git branch -D<br></code></pre></td></tr></table></figure><p>rebase 命令很强大，<code>git rebase -i HEAD~[num]</code> 和 <code>git pull --rebase</code> 等。</p><blockquote><h3 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h3><p><a href="http://jartto.wang/2018/12/11/git-rebase/">彻底搞懂 Git-Rebase</a></p></blockquote><ul><li>git merge适合公共分支，将其他分支合并到公共分支，merge操作两个分支最新的提交点会形成新的一个提交点，使后合并进来的commit记录仍然保持在后边。（merge以后会多出无意义的一条提交记录“Merge … to …”）</li><li>git rebase适合个人分支（只自己一个人提交）。日常开发过程中，个人分支代码需要和公共分支代码保持一致最新，定期合并公共分支代码到个人分支。执行rebase操作后，会从指定分支上合并别人新的commit在我们的commit之前。（缺点是rebase以后就不知道当前分支最早是从哪个分支拉出来的了，因为基底变了）</li></ul><h2 id="回滚操作"><a href="#回滚操作" class="headerlink" title="回滚操作"></a>回滚操作</h2><h3 id="代码-git-commit-到本地分支，但没有-git-push-到远程"><a href="#代码-git-commit-到本地分支，但没有-git-push-到远程" class="headerlink" title="代码 git commit 到本地分支，但没有 git push 到远程"></a>代码 git commit 到本地分支，但没有 git push 到远程</h3><p>git log # 得到你需要回退一次提交的commit id<br>git reset –hard <commit_id>  # 回到其中你想要的某个版本<br>git reset –hard HEAD^  # 回到最新的一次提交<br>git reset HEAD^  # 此时代码保留，回到 git add 之前</p>]]></content>
    
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/04/22/hello-world/"/>
    <url>/2023/04/22/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
