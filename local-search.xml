<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>leveldb入门</title>
    <link href="/2023/04/22/leveldb%E5%85%A5%E9%97%A8/"/>
    <url>/2023/04/22/leveldb%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="leveldb简介"><a href="#leveldb简介" class="headerlink" title="leveldb简介"></a>leveldb简介</h1><pre><code class="hljs"> LevelDb是能够处理十亿级别规模Key-Value型数据持久性存储的嵌入式数据库，内部没有设计成C/S网络结构，必须和服务部署在同一台服务器。levelDB其实也是一个C++程序库，是可以可以被编译和链接到我们自己的程序中的库，而不是像Redis那样是一个数据库服务器。LevelDb本质上是一个存储引擎，即一套存储系统以及在这套存储系统上提供的一些操作接口。LevelDb有如下一些特点：</code></pre><ul><li>首先，LevelDb是一个持久化存储的KV系统，和Redis这种内存型的KV系统不同，redis是一个内存数据库，它是将KV写入内存中，而LevelDb不会像Redis一样狂吃内存，而是将大部分数据存储到磁盘上。从某种意义上说，redis是非持久化的，而levelDB是实时持久化的。</li><li>key、value支持任意的byte类型数组，不单单支持字符串</li><li>其次，LevelDb在存储数据时，是根据记录的key值有序存储的，就是说相邻的key值在存储文件中是依次顺序存储的，而应用可以自定义key大小比较函数，LevleDb会按照用户定义的比较函数依序存储这些记录。</li><li>再次，像大多数KV系统一样，LevelDb的操作接口很简单，基本操作包括写记录，读记录以及删除记录。也支持针对多条操作的原子批量操作。</li><li>另外，LevelDb支持数据快照（snapshot）功能，使得读取操作不受写操作影响，可以在读操作过程中始终看到一致的数据。</li><li>除此外，LevelDb还支持数据压缩等操作，这对于减小存储空间以及增快IO效率都有直接的帮助。</li><li>LSM典型实现，适合写多读少。</li></ul><h1 id="编译-amp-安装"><a href="#编译-amp-安装" class="headerlink" title="编译&amp;安装"></a>编译&amp;安装</h1><ul><li>源码下载</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/google/leveldb.git<br>git submodule update --init<br></code></pre></td></tr></table></figure><ul><li>执行编译</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd leveldb<br>mkdir -p build &amp;&amp; cd build <br>cmake -DCMAKE_BUILD_TYPE=Release .. &amp;&amp; cmake --build .<br></code></pre></td></tr></table></figure><ul><li>头文件加入系统目录(可选)</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cp -r ./include/leveldb /usr/include/<br></code></pre></td></tr></table></figure><ul><li>编写demo</li><li>编译demo</li></ul><p>g++ -o xxx xxx.cpp libleveldb.a -lpthread</p><p>测试程序如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cassert&gt;</span></span><br> <br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;leveldb/db.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;leveldb/write_batch.h&quot;</span></span><br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// Open a database.</span><br>    leveldb::DB* db;<br>    leveldb::Options opts;<br>    opts.create_if_missing = <span class="hljs-literal">true</span>;<br>    leveldb::Status status = leveldb::DB::<span class="hljs-built_in">Open</span>(opts, <span class="hljs-string">&quot;./testdb&quot;</span>, &amp;db);<br>    <span class="hljs-built_in">assert</span>(status.<span class="hljs-built_in">ok</span>());<br>    <br>    <span class="hljs-comment">// Write data.</span><br>    status = db-&gt;<span class="hljs-built_in">Put</span>(leveldb::<span class="hljs-built_in">WriteOptions</span>(), <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;jinhelin&quot;</span>);<br>    <span class="hljs-built_in">assert</span>(status.<span class="hljs-built_in">ok</span>());<br> <br>    <span class="hljs-comment">// Read data.</span><br>    std::string val;<br>    status = db-&gt;<span class="hljs-built_in">Get</span>(leveldb::<span class="hljs-built_in">ReadOptions</span>(), <span class="hljs-string">&quot;name&quot;</span>, &amp;val);<br>    <span class="hljs-built_in">assert</span>(status.<span class="hljs-built_in">ok</span>());<br>    std::cout &lt;&lt; val &lt;&lt; std::endl;<br> <br>    <span class="hljs-comment">// Batch atomic write.</span><br>    leveldb::WriteBatch batch;<br>    batch.<span class="hljs-built_in">Delete</span>(<span class="hljs-string">&quot;name&quot;</span>);<br>    batch.<span class="hljs-built_in">Put</span>(<span class="hljs-string">&quot;name0&quot;</span>, <span class="hljs-string">&quot;jinhelin0&quot;</span>);<br>    batch.<span class="hljs-built_in">Put</span>(<span class="hljs-string">&quot;name1&quot;</span>, <span class="hljs-string">&quot;jinhelin1&quot;</span>);<br>    batch.<span class="hljs-built_in">Put</span>(<span class="hljs-string">&quot;name2&quot;</span>, <span class="hljs-string">&quot;jinhelin2&quot;</span>);<br>    batch.<span class="hljs-built_in">Put</span>(<span class="hljs-string">&quot;name3&quot;</span>, <span class="hljs-string">&quot;jinhelin3&quot;</span>);<br>    batch.<span class="hljs-built_in">Put</span>(<span class="hljs-string">&quot;name4&quot;</span>, <span class="hljs-string">&quot;jinhelin4&quot;</span>);<br>    batch.<span class="hljs-built_in">Put</span>(<span class="hljs-string">&quot;name5&quot;</span>, <span class="hljs-string">&quot;jinhelin5&quot;</span>);<br>    batch.<span class="hljs-built_in">Put</span>(<span class="hljs-string">&quot;name6&quot;</span>, <span class="hljs-string">&quot;jinhelin6&quot;</span>);<br>    batch.<span class="hljs-built_in">Put</span>(<span class="hljs-string">&quot;name7&quot;</span>, <span class="hljs-string">&quot;jinhelin7&quot;</span>);<br>    batch.<span class="hljs-built_in">Put</span>(<span class="hljs-string">&quot;name8&quot;</span>, <span class="hljs-string">&quot;jinhelin8&quot;</span>);<br>    batch.<span class="hljs-built_in">Put</span>(<span class="hljs-string">&quot;name9&quot;</span>, <span class="hljs-string">&quot;jinhelin9&quot;</span>);<br>    status = db-&gt;<span class="hljs-built_in">Write</span>(leveldb::<span class="hljs-built_in">WriteOptions</span>(), &amp;batch);<br>    <span class="hljs-built_in">assert</span>(status.<span class="hljs-built_in">ok</span>());<br> <br>    <span class="hljs-comment">// Scan database.</span><br>    leveldb::Iterator* it = db-&gt;<span class="hljs-built_in">NewIterator</span>(leveldb::<span class="hljs-built_in">ReadOptions</span>());<br>    <span class="hljs-keyword">for</span> (it-&gt;<span class="hljs-built_in">SeekToFirst</span>(); it-&gt;<span class="hljs-built_in">Valid</span>(); it-&gt;<span class="hljs-built_in">Next</span>()) &#123;<br>        std::cout &lt;&lt; it-&gt;<span class="hljs-built_in">key</span>().<span class="hljs-built_in">ToString</span>() &lt;&lt; <span class="hljs-string">&quot;: &quot;</span> &lt;&lt; <br>          it-&gt;<span class="hljs-built_in">value</span>().<span class="hljs-built_in">ToString</span>() &lt;&lt; std::endl;<br>    &#125;<br>    <span class="hljs-built_in">assert</span>(it-&gt;<span class="hljs-built_in">status</span>().<span class="hljs-built_in">ok</span>());<br>    <br>    <span class="hljs-comment">// Range scan, example: [name3, name8)</span><br>    <span class="hljs-keyword">for</span> (it-&gt;<span class="hljs-built_in">Seek</span>(<span class="hljs-string">&quot;name3&quot;</span>); <br>         it-&gt;<span class="hljs-built_in">Valid</span>() &amp;&amp; it-&gt;<span class="hljs-built_in">key</span>().<span class="hljs-built_in">ToString</span>() &lt; <span class="hljs-string">&quot;name8&quot;</span>; <br>         it-&gt;<span class="hljs-built_in">Next</span>()) &#123;<br>        std::cout &lt;&lt; it-&gt;<span class="hljs-built_in">key</span>().<span class="hljs-built_in">ToString</span>() &lt;&lt; <span class="hljs-string">&quot;: &quot;</span> &lt;&lt; <br>          it-&gt;<span class="hljs-built_in">value</span>().<span class="hljs-built_in">ToString</span>() &lt;&lt; std::endl;<br>    &#125; <br> <br>    <span class="hljs-comment">// Close a database.</span><br>    <span class="hljs-keyword">delete</span> db;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="教程网站"><a href="#教程网站" class="headerlink" title="教程网站"></a>教程网站</h1><p><a href="https://zhuanlan.zhihu.com/p/80684560">leveldb源码阅读系列 - 知乎 (zhihu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/560749237">到处抄来的LevelDB笔记 - 知乎 (zhihu.com)</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>leveldb</tag>
      
      <tag>Database</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>QT-读写ini配置文件</title>
    <link href="/2023/04/22/QT-%E8%AF%BB%E5%86%99ini%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <url>/2023/04/22/QT-%E8%AF%BB%E5%86%99ini%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="写ini"><a href="#写ini" class="headerlink" title="写ini"></a>写ini</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//创建QSettings对象并指定ini文件路径并将格式设置为ini</span><br>            <span class="hljs-function">QSettings <span class="hljs-title">setting</span><span class="hljs-params">(<span class="hljs-string">&quot;./userprofile.ini&quot;</span>, QSettings::IniFormat)</span></span>;<br>               <span class="hljs-comment">//创建第一个分组(创建分组的第一种方法)</span><br>               setting.<span class="hljs-built_in">beginGroup</span>(<span class="hljs-string">&quot;logininfo&quot;</span>);<br>               <span class="hljs-comment">//添加第一个分组中的键值对</span><br>               setting.<span class="hljs-built_in">setValue</span>(<span class="hljs-string">&quot;username&quot;</span>, username);<br>               setting.<span class="hljs-built_in">setValue</span>(<span class="hljs-string">&quot;password&quot;</span>, password);<br>               setting.<span class="hljs-built_in">setValue</span>(<span class="hljs-string">&quot;ip&quot;</span>, ipaddr);<br>               <span class="hljs-comment">//设置当前分组结束</span><br>               setting.<span class="hljs-built_in">endGroup</span>();<br>               <span class="hljs-comment">//添加第二个分组以及其键值对（创建分组的第二种方法）</span><br>               setting.<span class="hljs-built_in">setValue</span>(<span class="hljs-string">&quot;checkinfo/rempas&quot;</span>, <span class="hljs-literal">true</span>);<br>               setting.<span class="hljs-built_in">setValue</span>(<span class="hljs-string">&quot;checkinfo/remprinter&quot;</span>, <span class="hljs-string">&quot;zhi2&quot;</span>);<br>               setting.<span class="hljs-built_in">setValue</span>(<span class="hljs-string">&quot;checkinfo/remtest&quot;</span>, <span class="hljs-string">&quot;sameZhi&quot;</span>);<br></code></pre></td></tr></table></figure><h1 id="读ini"><a href="#读ini" class="headerlink" title="读ini"></a>读ini</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//创建QSettings对象并指定ini文件路径并将格式设置为ini</span><br>    <span class="hljs-function">QSettings <span class="hljs-title">setting</span><span class="hljs-params">(<span class="hljs-string">&quot;./userprofile.ini&quot;</span>, QSettings::IniFormat)</span></span>;<br>    <span class="hljs-keyword">if</span>(setting.<span class="hljs-built_in">value</span>(<span class="hljs-string">&quot;/checkinfo/rempas&quot;</span>).<span class="hljs-built_in">toString</span>()==<span class="hljs-string">&quot;true&quot;</span>)&#123;<br>            <span class="hljs-comment">//设置IP地址&quot;43.134.167.160&quot;</span><br>            ui-&gt;ipaddline-&gt;<span class="hljs-built_in">setText</span>(setting.<span class="hljs-built_in">value</span>(<span class="hljs-string">&quot;/logininfo/ip&quot;</span>).<span class="hljs-built_in">toString</span>());<br>            <span class="hljs-comment">//设置用户名</span><br>            ui-&gt;usernameline-&gt;<span class="hljs-built_in">setText</span>(setting.<span class="hljs-built_in">value</span>(<span class="hljs-string">&quot;/logininfo/username&quot;</span>).<span class="hljs-built_in">toString</span>());<br>            <span class="hljs-comment">//设置用户名</span><br>            ui-&gt;passwordline-&gt;<span class="hljs-built_in">setText</span>(setting.<span class="hljs-built_in">value</span>(<span class="hljs-string">&quot;/logininfo/password&quot;</span>).<span class="hljs-built_in">toString</span>());<br>            ui-&gt;rempas-&gt;<span class="hljs-built_in">setChecked</span>(<span class="hljs-literal">true</span>);<br>        &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>QT</tag>
      
      <tag>CPP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>QT-剪贴板操作</title>
    <link href="/2023/04/22/QT-%E5%89%AA%E8%B4%B4%E6%9D%BF%E6%93%8D%E4%BD%9C/"/>
    <url>/2023/04/22/QT-%E5%89%AA%E8%B4%B4%E6%9D%BF%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="剪贴板操作"><a href="#剪贴板操作" class="headerlink" title="剪贴板操作"></a>剪贴板操作</h1><p>剪贴板的操作经常和前面所说的拖放技术在一起使用，因此我们现在先来说说剪贴板的相关操作。大家对剪贴板都很熟悉。我们可以简单的把它理解成一个数据的存储池，可以把外面的数据放置进去，也可以把里面的数据取出来。剪贴板是由操作系统维护的，所以这提供了跨应用程序数据交互的一种方式。Qt 已经为我们封装好很多关于剪贴板的操作，因此我们可以在自己的应用中很容易的实现。下面还是从代码开始:</p><h2 id="clipboarddemo-h"><a href="#clipboarddemo-h" class="headerlink" title="clipboarddemo.h"></a>clipboarddemo.h</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> CLIPBOARDDEMO_H  </span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CLIPBOARDDEMO_H  </span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QtGui/QWidget&gt;</span>  </span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ClipboardDemo</span> : <span class="hljs-keyword">public</span> QWidget  <br>&#123;  <br>    Q_OBJECT  <br><br><span class="hljs-keyword">public</span>:  <br>    <span class="hljs-built_in">ClipboardDemo</span>(QWidget *parent = <span class="hljs-number">0</span>);  <br><br><span class="hljs-keyword">private</span> slots:  <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setClipboard</span><span class="hljs-params">()</span></span>;  <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getClipboard</span><span class="hljs-params">()</span></span>;  <br>&#125;;  <br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// CLIPBOARDDEMO_H </span></span><br></code></pre></td></tr></table></figure><h2 id="clipboarddemo-cpp"><a href="#clipboarddemo-cpp" class="headerlink" title="clipboarddemo.cpp"></a>clipboarddemo.cpp</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QtGui&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;clipboarddemo.h&quot;</span>  </span><br><br>ClipboardDemo::<span class="hljs-built_in">ClipboardDemo</span>(QWidget *parent)  <br>    : <span class="hljs-built_in">QWidget</span>(parent)  <br>&#123;  <br>    QVBoxLayout *mainLayout = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QVBoxLayout</span>(<span class="hljs-keyword">this</span>);  <br>    QHBoxLayout *northLayout = <span class="hljs-keyword">new</span> QHBoxLayout;  <br>    QHBoxLayout *southLayout = <span class="hljs-keyword">new</span> QHBoxLayout;  <br><br>    QTextEdit *editor = <span class="hljs-keyword">new</span> QTextEdit;  <br>    QLabel *label = <span class="hljs-keyword">new</span> QLabel;  <br>    label-&gt;<span class="hljs-built_in">setText</span>(<span class="hljs-string">&quot;Text Input: &quot;</span>);  <br>    label-&gt;<span class="hljs-built_in">setBuddy</span>(editor);  <br>    QPushButton *copyButton = <span class="hljs-keyword">new</span> QPushButton;  <br>    copyButton-&gt;<span class="hljs-built_in">setText</span>(<span class="hljs-string">&quot;Set Clipboard&quot;</span>);  <br>    QPushButton *pasteButton = <span class="hljs-keyword">new</span> QPushButton;  <br>    pasteButton-&gt;<span class="hljs-built_in">setText</span>(<span class="hljs-string">&quot;Get Clipboard&quot;</span>);  <br><br>    northLayout-&gt;<span class="hljs-built_in">addWidget</span>(label);  <br>    northLayout-&gt;<span class="hljs-built_in">addWidget</span>(editor);  <br>    southLayout-&gt;<span class="hljs-built_in">addWidget</span>(copyButton);  <br>    southLayout-&gt;<span class="hljs-built_in">addWidget</span>(pasteButton);  <br>    mainLayout-&gt;<span class="hljs-built_in">addLayout</span>(northLayout);  <br>    mainLayout-&gt;<span class="hljs-built_in">addLayout</span>(southLayout);  <br><br>    <span class="hljs-built_in">connect</span>(copyButton, <span class="hljs-built_in">SIGNAL</span>(<span class="hljs-built_in">clicked</span>()), <span class="hljs-keyword">this</span>, <span class="hljs-built_in">SLOT</span>(<span class="hljs-built_in">setClipboard</span>()));  <br>    <span class="hljs-built_in">connect</span>(pasteButton, <span class="hljs-built_in">SIGNAL</span>(<span class="hljs-built_in">clicked</span>()), <span class="hljs-keyword">this</span>, <span class="hljs-built_in">SLOT</span>(<span class="hljs-built_in">getClipboard</span>()));  <br>&#125;  <br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ClipboardDemo::setClipboard</span><span class="hljs-params">()</span>  </span><br><span class="hljs-function"></span>&#123;  <br>    QClipboard *board = QApplication::<span class="hljs-built_in">clipboard</span>();  <br>    board-&gt;<span class="hljs-built_in">setText</span>(<span class="hljs-string">&quot;Text from Qt Application&quot;</span>);  <br>&#125;  <br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ClipboardDemo::getClipboard</span><span class="hljs-params">()</span>  </span><br><span class="hljs-function"></span>&#123;  <br>    QClipboard *board = QApplication::<span class="hljs-built_in">clipboard</span>();  <br>    QString str = board-&gt;<span class="hljs-built_in">text</span>();  <br>    QMessageBox::<span class="hljs-built_in">information</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;From clipboard&quot;</span>, str);  <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>QT</tag>
      
      <tag>CPP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git实际开发场景</title>
    <link href="/2023/04/22/Git%E5%AE%9E%E9%99%85%E5%BC%80%E5%8F%91%E5%9C%BA%E6%99%AF/"/>
    <url>/2023/04/22/Git%E5%AE%9E%E9%99%85%E5%BC%80%E5%8F%91%E5%9C%BA%E6%99%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="日常工作的Git流程"><a href="#日常工作的Git流程" class="headerlink" title="日常工作的Git流程"></a>日常工作的Git流程</h1><h2 id="工作流程1"><a href="#工作流程1" class="headerlink" title="工作流程1"></a>工作流程1</h2><p>1.git clone                &#x2F;&#x2F;到本地<br>2.git checkout -b xxx          &#x2F;&#x2F;切换至新分支xxx<br>（相当于复制了remote的仓库到本地的xxx分支上<br>3.修改或者添加本地代码（部署在硬盘的源文件上）<br>4.git diff          &#x2F;&#x2F;查看自己对代码做出的改变<br>5.git add       &#x2F;&#x2F;上传更新后的代码至暂存区<br>6.git commit -m 注释        &#x2F;&#x2F;可以将暂存区里更新后的代码更新到本地git<br>7.git push origin xxx     &#x2F;&#x2F;将本地的xxxgit分支上传至github上的git<br>-——————————————————————————————–<br>（如果在写自己的代码过程中发现远端GitHub上代码出现改变）<br>1.git checkout main        &#x2F;&#x2F;切换回main分支<br>2.git pull origin main      &#x2F;&#x2F;将远端修改过的代码再更新到本地</p><p>​(即将远程origin主机的master分支拉取过来和本地的当前分支进行合并)<br>3.git checkout xxx           &#x2F;&#x2F;回到xxx分支<br>4.git rebase main           &#x2F;&#x2F;我在xxx分支上，先把main移过来，然后根据我的commit来修改成新的内容<br>（中途可能会出现，rebase conflict —–》手动选择保留哪段代码）<br>5.git push -f origin xxx        &#x2F;&#x2F;把rebase后并且更新过的代码再push到远端github上<br>（-f —》强行）<br>6.原项目主人采用pull request 中的 squash and merge 合并所有不同的commit<br>-———————————————————————————————<br>远端完成更新后<br>1.git branch -d xxx 删除本地的git分支<br>2.git pull origin main 再把远端的最新代码拉至本地</p><h2 id="工作流程2"><a href="#工作流程2" class="headerlink" title="工作流程2"></a>工作流程2</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">git rebase <br><span class="hljs-keyword">while</span>(存在冲突) &#123;<br>    git status<br>    找到当前冲突文件，编辑解决冲突<br>    git add -u<br>    git rebase --<span class="hljs-built_in">continue</span><br>    <span class="hljs-keyword">if</span>( git rebase --abort )<br>        <span class="hljs-built_in">break</span>; <br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">git pull<br>编辑冲突文件<br>git add .<br>git commit -m <span class="hljs-string">&quot;feat: this is a comment&quot;</span><br>git push<br></code></pre></td></tr></table></figure><h2 id="删除其他分支"><a href="#删除其他分支" class="headerlink" title="删除其他分支"></a>删除其他分支</h2><p>这个是经常会用到的，因为本地开发多次之后，使用 <code>git branch</code> 之后会发现有很多分支还在，为了保证「干净卫生」，所以就了解一下，可以执行如下命令。</p><ul><li>增强命令（master）</li></ul><blockquote><p>可以删除除开 master 以外的分支，但类似 <code>mr/master/xxx</code> 这样的带有 master 的删除不了。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git stash &amp;&amp; git checkout master &amp;&amp; git branch | grep -v &quot;master&quot; | xargs git branch -D<br></code></pre></td></tr></table></figure><ul><li>增强命令（release）</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git stash &amp;&amp; git checkout release &amp;&amp; git branch | grep -v &quot;release&quot; | xargs git branch -D<br></code></pre></td></tr></table></figure><p>rebase 命令很强大，<code>git rebase -i HEAD~[num]</code> 和 <code>git pull --rebase</code> 等。</p><blockquote><h3 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h3><p><a href="http://jartto.wang/2018/12/11/git-rebase/">彻底搞懂 Git-Rebase</a></p></blockquote><ul><li>git merge适合公共分支，将其他分支合并到公共分支，merge操作两个分支最新的提交点会形成新的一个提交点，使后合并进来的commit记录仍然保持在后边。（merge以后会多出无意义的一条提交记录“Merge … to …”）</li><li>git rebase适合个人分支（只自己一个人提交）。日常开发过程中，个人分支代码需要和公共分支代码保持一致最新，定期合并公共分支代码到个人分支。执行rebase操作后，会从指定分支上合并别人新的commit在我们的commit之前。（缺点是rebase以后就不知道当前分支最早是从哪个分支拉出来的了，因为基底变了）</li></ul><h2 id="回滚操作"><a href="#回滚操作" class="headerlink" title="回滚操作"></a>回滚操作</h2><h3 id="代码-git-commit-到本地分支，但没有-git-push-到远程"><a href="#代码-git-commit-到本地分支，但没有-git-push-到远程" class="headerlink" title="代码 git commit 到本地分支，但没有 git push 到远程"></a>代码 git commit 到本地分支，但没有 git push 到远程</h3><p>git log # 得到你需要回退一次提交的commit id<br>git reset –hard <commit_id>  # 回到其中你想要的某个版本<br>git reset –hard HEAD^  # 回到最新的一次提交<br>git reset HEAD^  # 此时代码保留，回到 git add 之前</p>]]></content>
    
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/04/22/hello-world/"/>
    <url>/2023/04/22/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
