<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Git实际开发场景</title>
    <link href="/2023/04/22/Git%E5%AE%9E%E9%99%85%E5%BC%80%E5%8F%91%E5%9C%BA%E6%99%AF/"/>
    <url>/2023/04/22/Git%E5%AE%9E%E9%99%85%E5%BC%80%E5%8F%91%E5%9C%BA%E6%99%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="日常工作的Git流程"><a href="#日常工作的Git流程" class="headerlink" title="日常工作的Git流程"></a>日常工作的Git流程</h1><h2 id="工作流程1"><a href="#工作流程1" class="headerlink" title="工作流程1"></a>工作流程1</h2><p>1.git clone                &#x2F;&#x2F;到本地<br>2.git checkout -b xxx          &#x2F;&#x2F;切换至新分支xxx<br>（相当于复制了remote的仓库到本地的xxx分支上<br>3.修改或者添加本地代码（部署在硬盘的源文件上）<br>4.git diff          &#x2F;&#x2F;查看自己对代码做出的改变<br>5.git add       &#x2F;&#x2F;上传更新后的代码至暂存区<br>6.git commit -m 注释        &#x2F;&#x2F;可以将暂存区里更新后的代码更新到本地git<br>7.git push origin xxx     &#x2F;&#x2F;将本地的xxxgit分支上传至github上的git<br>-——————————————————————————————–<br>（如果在写自己的代码过程中发现远端GitHub上代码出现改变）<br>1.git checkout main        &#x2F;&#x2F;切换回main分支<br>2.git pull origin main      &#x2F;&#x2F;将远端修改过的代码再更新到本地</p><p>​(即将远程origin主机的master分支拉取过来和本地的当前分支进行合并)<br>3.git checkout xxx           &#x2F;&#x2F;回到xxx分支<br>4.git rebase main           &#x2F;&#x2F;我在xxx分支上，先把main移过来，然后根据我的commit来修改成新的内容<br>（中途可能会出现，rebase conflict —–》手动选择保留哪段代码）<br>5.git push -f origin xxx        &#x2F;&#x2F;把rebase后并且更新过的代码再push到远端github上<br>（-f —》强行）<br>6.原项目主人采用pull request 中的 squash and merge 合并所有不同的commit<br>-———————————————————————————————<br>远端完成更新后<br>1.git branch -d xxx 删除本地的git分支<br>2.git pull origin main 再把远端的最新代码拉至本地</p><h2 id="工作流程2"><a href="#工作流程2" class="headerlink" title="工作流程2"></a>工作流程2</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">git rebase <br><span class="hljs-keyword">while</span>(存在冲突) &#123;<br>    git status<br>    找到当前冲突文件，编辑解决冲突<br>    git add -u<br>    git rebase --<span class="hljs-built_in">continue</span><br>    <span class="hljs-keyword">if</span>( git rebase --abort )<br>        <span class="hljs-built_in">break</span>; <br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">git pull<br>编辑冲突文件<br>git add .<br>git commit -m <span class="hljs-string">&quot;feat: this is a comment&quot;</span><br>git push<br></code></pre></td></tr></table></figure><h2 id="删除其他分支"><a href="#删除其他分支" class="headerlink" title="删除其他分支"></a>删除其他分支</h2><p>这个是经常会用到的，因为本地开发多次之后，使用 <code>git branch</code> 之后会发现有很多分支还在，为了保证「干净卫生」，所以就了解一下，可以执行如下命令。</p><ul><li>增强命令（master）</li></ul><blockquote><p>可以删除除开 master 以外的分支，但类似 <code>mr/master/xxx</code> 这样的带有 master 的删除不了。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git stash &amp;&amp; git checkout master &amp;&amp; git branch | grep -v &quot;master&quot; | xargs git branch -D<br></code></pre></td></tr></table></figure><ul><li>增强命令（release）</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git stash &amp;&amp; git checkout release &amp;&amp; git branch | grep -v &quot;release&quot; | xargs git branch -D<br></code></pre></td></tr></table></figure><p>rebase 命令很强大，<code>git rebase -i HEAD~[num]</code> 和 <code>git pull --rebase</code> 等。</p><blockquote><h3 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h3><p><a href="http://jartto.wang/2018/12/11/git-rebase/">彻底搞懂 Git-Rebase</a></p></blockquote><ul><li>git merge适合公共分支，将其他分支合并到公共分支，merge操作两个分支最新的提交点会形成新的一个提交点，使后合并进来的commit记录仍然保持在后边。（merge以后会多出无意义的一条提交记录“Merge … to …”）</li><li>git rebase适合个人分支（只自己一个人提交）。日常开发过程中，个人分支代码需要和公共分支代码保持一致最新，定期合并公共分支代码到个人分支。执行rebase操作后，会从指定分支上合并别人新的commit在我们的commit之前。（缺点是rebase以后就不知道当前分支最早是从哪个分支拉出来的了，因为基底变了）</li></ul><h2 id="回滚操作"><a href="#回滚操作" class="headerlink" title="回滚操作"></a>回滚操作</h2><h3 id="代码-git-commit-到本地分支，但没有-git-push-到远程"><a href="#代码-git-commit-到本地分支，但没有-git-push-到远程" class="headerlink" title="代码 git commit 到本地分支，但没有 git push 到远程"></a>代码 git commit 到本地分支，但没有 git push 到远程</h3><p>git log # 得到你需要回退一次提交的commit id<br>git reset –hard <commit_id>  # 回到其中你想要的某个版本<br>git reset –hard HEAD^  # 回到最新的一次提交<br>git reset HEAD^  # 此时代码保留，回到 git add 之前</p>]]></content>
    
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/04/22/hello-world/"/>
    <url>/2023/04/22/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
